<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Dantel的博客</title>
  <subtitle>上不慕古，下不肖俗。为疏为懒，不敢为狂；为拙为愚，不敢为恶。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-01-24T07:09:37.371Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Dantel Chen</name>
    <email>122358085@qq.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>node调用mysql</title>
    <link href="http://yoursite.com/2017/01/24/node_mysql/"/>
    <id>http://yoursite.com/2017/01/24/node_mysql/</id>
    <published>2017-01-24T07:03:19.456Z</published>
    <updated>2017-01-24T07:09:37.371Z</updated>
    
    <content type="html"><![CDATA[<p>node.js与mysql交互。 </p>
<a id="more"></a>
<h2 id="npm安装"><a href="#npm安装" class="headerlink" title="npm安装"></a>npm安装</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install mysql</div></pre></td></tr></table></figure>
<h2 id="使用案例"><a href="#使用案例" class="headerlink" title="使用案例"></a>使用案例</h2><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">initClient</span>(<span class="params">callback</span>) </span>&#123;</div><div class="line">    option = &#123;</div><div class="line">        <span class="attr">host</span> : config.mysql_catchfish_debug.host,</div><div class="line">        <span class="attr">port</span> :  config.mysql_catchfish_debug.port,</div><div class="line">        <span class="attr">user</span> :  config.mysql_catchfish_debug.user,</div><div class="line">        <span class="attr">password</span> :  config.mysql_catchfish_debug.password,</div><div class="line">        <span class="attr">database</span> :  config.mysql_catchfish_debug.database</div><div class="line">    &#125;;</div><div class="line">    client = mysql.createConnection(option);</div><div class="line">    client.connect(<span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</div><div class="line">       <span class="keyword">if</span> (err) &#123;</div><div class="line">            <span class="built_in">console</span>.log(<span class="string">'initClient [[mysql db]]error when connecting to db:requestConnectMySqlTime = '</span> + requestConnectMySqlTime + <span class="string">';err = '</span>, err);</div><div class="line">            requestConnectMySqlTime++;</div><div class="line">            setTimeout(initClient, <span class="number">5</span>*<span class="number">1000</span>);<span class="comment">// TODO :  if retry time over 3, need send mail</span></div><div class="line">            callback(<span class="literal">false</span>);</div><div class="line">       &#125;<span class="keyword">else</span> &#123;</div><div class="line">            requestConnectMySqlTime = <span class="number">0</span>;</div><div class="line">            callback(<span class="literal">true</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    client.on(<span class="string">'error'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'initClient db error'</span>, err);</div><div class="line">        <span class="keyword">if</span> (err.code === <span class="string">'PROTOCOL_CONNECTION_LOST'</span>) &#123; <span class="comment">// 如果是连接断开，自动重新连接</span></div><div class="line">            initClient(<span class="function"><span class="keyword">function</span>(<span class="params">result</span>)</span>&#123;</div><div class="line">                <span class="built_in">console</span>.log(<span class="string">'reconnect db result : '</span> + result);</div><div class="line">            &#125;);</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="调用"><a href="#调用" class="headerlink" title="调用"></a>调用</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">syncPlayerBaseFortuneInfo</span>(<span class="params">client, sync_info, callback</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> values = [</div><div class="line">    [sync_info.user_id, sync_info.coins, sync_info.diamonds, sync_info.exps, sync_info.turrent_level]</div><div class="line">  ];</div><div class="line">  client.query(<span class="string">' INSERT INTO user_fortune_'</span> + sync_info.fortune_id + <span class="string">' (user_id, coins, diamonds, exp, turrent_level) VALUES ? '</span> +</div><div class="line">      <span class="string">' ON DUPLICATE KEY UPDATE coins = VALUES(coins),'</span> +</div><div class="line">      <span class="string">' diamonds = VALUES(diamonds) , exp = VALUES(exp), turrent_level = VALUES(turrent_level)'</span>,</div><div class="line">  	   [values],</div><div class="line">    <span class="function"><span class="keyword">function</span> (<span class="params">err, results</span>) </span>&#123;</div><div class="line">        <span class="keyword">if</span> (err) &#123;</div><div class="line">            callback(<span class="literal">false</span>);</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">        callback(<span class="literal">true</span>);</div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;node.js与mysql交互。 &lt;/p&gt;
    
    </summary>
    
    
      <category term="node.js学习" scheme="http://yoursite.com/tags/node-js%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>redis实用之session管理</title>
    <link href="http://yoursite.com/2017/01/22/node_redis_example_session/"/>
    <id>http://yoursite.com/2017/01/22/node_redis_example_session/</id>
    <published>2017-01-22T08:33:08.768Z</published>
    <updated>2017-01-23T02:46:25.146Z</updated>
    
    <content type="html"><![CDATA[<p>在游戏服务器里，登录服务器是必不可少的一块<br>运用redis设置带时效的缓存，可以很好的解决session管理的问题。。<br><a id="more"></a></p>
<h2 id="sessionManager"><a href="#sessionManager" class="headerlink" title="sessionManager"></a>sessionManager</h2><h3 id="用户登录"><a href="#用户登录" class="headerlink" title="用户登录"></a>用户登录</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 用户登录</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">LoginIn</span>(<span class="params">userinfo</span>) </span>&#123;</div><div class="line">	redishelper.setValueWithExpire(getNewSessionId(),userinfo,SESSION_EXPIRE);</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="用户登出"><a href="#用户登出" class="headerlink" title="用户登出"></a>用户登出</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 用户登出</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">loginOut</span>(<span class="params">session_id</span>) </span>&#123;</div><div class="line">	redishelper.getVaule(session_id,<span class="function"><span class="keyword">function</span>(<span class="params">err,redis_result</span>) </span>&#123;</div><div class="line"><span class="keyword">if</span>(!err)</div><div class="line">&#123;</div><div class="line">	saveInfoToDB(redis_result);</div><div class="line">	<span class="comment">////将缓存存储到数据库</span></div><div class="line">&#125;</div><div class="line">		redishelper.del(session_id);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="判断用户是否登录"><a href="#判断用户是否登录" class="headerlink" title="判断用户是否登录"></a>判断用户是否登录</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * 判断用户是否登录</div><div class="line"> */</div><div class="line">function isLogin(session_id, callback) &#123;</div><div class="line">	(function(session_id)&#123;</div><div class="line">		redishelper.getVaule(session_id, function(err, redis_result)&#123;</div><div class="line">			if(err) &#123;</div><div class="line">				callback(false, agreement.redisErrorDesc);</div><div class="line">				return ;</div><div class="line">			&#125;</div><div class="line">			if(redis_result != undefined) &#123;</div><div class="line">				callback(true, JSON.parse(redis_result));</div><div class="line">				return ;</div><div class="line">			&#125;</div><div class="line">			callback(false, agreement.invalidSessionIdDesc);</div><div class="line">		&#125;);</div><div class="line">	&#125;)(session_id);</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="获取一个会话ID"><a href="#获取一个会话ID" class="headerlink" title="获取一个会话ID"></a>获取一个会话ID</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * 获取一个会话ID</div><div class="line"> */</div><div class="line">function getNewSessionId() &#123;</div><div class="line">	if(startVaule === 0) &#123;</div><div class="line">		startVaule = parseInt(new Date().getTime());</div><div class="line">	&#125;</div><div class="line">	startVaule++;</div><div class="line">	return SESSION_ID_HEAD + startVaule;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="调用示例"><a href="#调用示例" class="headerlink" title="调用示例"></a>调用示例</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">function login(user_id, passwords, callback) &#123;</div><div class="line"></div><div class="line">		user_db.isUserIdExit(dbmanager.getClientS(), user_id, passwords,function(errorcode, result) &#123;</div><div class="line">			if(errorcode === 0) &#123;</div><div class="line">				successGetUserLoginInfo(result,callback);</div><div class="line">			&#125;else &#123;</div><div class="line">				if(errorcode === 201) &#123;</div><div class="line">					callback(agreement.dbErrorDesc);</div><div class="line">				&#125;else &#123;</div><div class="line">					callback(agreement.noUserInfoDesc);</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;);</div><div class="line">&#125;</div><div class="line">// 去DB查询用户信息并更新缓存</div><div class="line">function successGetUserLoginInfo(result, callback) &#123;</div><div class="line">	(function(result)&#123;</div><div class="line">		player_logic.getPlayerInfo(result.user_id, result.fortune_id, function(success, user_result)&#123;</div><div class="line">			var clientResult;</div><div class="line">			if(success) &#123;</div><div class="line">				var session_id = session_manager.getNewSessionId();</div><div class="line">				var newResult = createUserSessionInfo(session_id, result, user_result);</div><div class="line">				session_manager.LogicIn(newResult,session_id);</div><div class="line">				clientResult = getLoginSuccessInfo(newResult.session_id);</div><div class="line">			&#125; else &#123;</div><div class="line">				clientResult = agreement.dbErrorDesc;</div><div class="line">			&#125;</div><div class="line">			console.log(&apos;clientResult : &apos; + JSON.stringify(clientResult));</div><div class="line">			callback(JSON.stringify(clientResult));</div><div class="line">		&#125;);</div><div class="line">	&#125;)(result);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在游戏服务器里，登录服务器是必不可少的一块&lt;br&gt;运用redis设置带时效的缓存，可以很好的解决session管理的问题。。&lt;br&gt;
    
    </summary>
    
    
      <category term="node.js学习" scheme="http://yoursite.com/tags/node-js%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>二叉树的实现（c++）</title>
    <link href="http://yoursite.com/2017/01/20/DataStructure_BinaryTree/"/>
    <id>http://yoursite.com/2017/01/20/DataStructure_BinaryTree/</id>
    <published>2017-01-20T02:51:40.348Z</published>
    <updated>2017-01-20T05:06:29.434Z</updated>
    
    <content type="html"><![CDATA[<p><strong>github</strong> : <a href="https://github.com/ckj258/DataStructure/tree/master/%E4%BA%8C%E5%8F%89%E6%9F%A5%E6%89%BE%E6%A0%91" target="_blank" rel="external">https://github.com/ckj258/DataStructure/tree/master/%E4%BA%8C%E5%8F%89%E6%9F%A5%E6%89%BE%E6%A0%91</a><br><a id="more"></a></p>
<h2 id="二叉树节点定义"><a href="#二叉树节点定义" class="headerlink" title="二叉树节点定义"></a>二叉树节点定义</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">struct</span> BinarySearchTreeNode</div><div class="line">&#123;</div><div class="line">	<span class="keyword">int</span> key;</div><div class="line">	BinarySearchTreeNode *leftChild;</div><div class="line">	BinarySearchTreeNode *rightChild;</div><div class="line">	BinarySearchTreeNode(<span class="keyword">int</span> tempKey)</div><div class="line">	&#123;</div><div class="line">		key=tempKey;</div><div class="line">		leftChild=<span class="literal">NULL</span>;</div><div class="line">		rightChild=<span class="literal">NULL</span>;</div><div class="line">	&#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h2 id="头文件"><a href="#头文件" class="headerlink" title="头文件"></a>头文件</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> BinarySearchTree</div><div class="line">&#123;</div><div class="line"><span class="keyword">private</span>:</div><div class="line">	BinarySearchTreeNode *Root;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">	BinarySearchTree();</div><div class="line">	<span class="function">BinarySearchTreeNode *<span class="title">GetRoot</span><span class="params">()</span></span>;</div><div class="line">	<span class="function">BinarySearchTreeNode *<span class="title">FindBST</span><span class="params">(<span class="keyword">int</span> )</span></span>;</div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">UpdataBSTNode</span><span class="params">(<span class="keyword">int</span>,<span class="keyword">int</span>)</span></span>;</div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">InsertBSTNode</span><span class="params">(<span class="keyword">int</span>)</span></span>;</div><div class="line">	<span class="function"><span class="keyword">bool</span> <span class="title">DeleteBSTNode</span><span class="params">(<span class="keyword">int</span>)</span></span>;</div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">DeleteNoOrOneChildBSTNode</span><span class="params">(BinarySearchTreeNode *,BinarySearchTreeNode *)</span></span>;</div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">PreOrderBSTPrint</span><span class="params">(BinarySearchTreeNode *)</span></span>;</div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">InOrderBSTPrint</span><span class="params">(BinarySearchTreeNode *)</span></span>;</div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">SufOrderBSTPrint</span><span class="params">(BinarySearchTreeNode *)</span></span>;</div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">RotateBSTPrint</span><span class="params">(BinarySearchTreeNode *,<span class="keyword">int</span>)</span></span>;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h2 id="返回二叉查找树根节点"><a href="#返回二叉查找树根节点" class="headerlink" title="返回二叉查找树根节点"></a>返回二叉查找树根节点</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**********************************************************</span></div><div class="line">*参数：无</div><div class="line">*返回值：空</div><div class="line">*功能：返回二叉查找树根节点</div><div class="line">************************************************************/</div><div class="line">BinarySearchTreeNode *BinarySearchTree::GetRoot()</div><div class="line">&#123;</div><div class="line">	<span class="keyword">return</span> <span class="keyword">this</span>-&gt;Root;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="查找节点"><a href="#查找节点" class="headerlink" title="查找节点"></a>查找节点</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**********************************************************</span></div><div class="line">*参数：待查找值</div><div class="line">*返回值：若找到则返回所在节点，否则返回NULL</div><div class="line">*功能：查找节点</div><div class="line">************************************************************/</div><div class="line">BinarySearchTreeNode *BinarySearchTree::FindBST(<span class="keyword">int</span> tempKey)</div><div class="line">&#123;</div><div class="line">	BinarySearchTreeNode *cur=<span class="keyword">this</span>-&gt;Root;</div><div class="line">	<span class="keyword">while</span>(cur!=<span class="literal">NULL</span>)</div><div class="line">	&#123;</div><div class="line">		<span class="keyword">if</span>(cur-&gt;key==tempKey)</div><div class="line">			<span class="keyword">break</span>;</div><div class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(cur-&gt;key&gt;tempKey)</div><div class="line">			cur=cur-&gt;leftChild;</div><div class="line">		<span class="keyword">else</span> cur=cur-&gt;rightChild;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> cur;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="返回二叉查找树根节点-1"><a href="#返回二叉查找树根节点-1" class="headerlink" title="返回二叉查找树根节点"></a>返回二叉查找树根节点</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**********************************************************</span></div><div class="line">*参数：无</div><div class="line">*返回值：空</div><div class="line">*功能：返回二叉查找树根节点</div><div class="line">************************************************************/</div><div class="line">BinarySearchTreeNode *BinarySearchTree::GetRoot()</div><div class="line">&#123;</div><div class="line">	<span class="keyword">return</span> <span class="keyword">this</span>-&gt;Root;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="插入新结点"><a href="#插入新结点" class="headerlink" title="插入新结点"></a>插入新结点</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**********************************************************</span></div><div class="line">*参数：待插入值</div><div class="line">*返回值：空</div><div class="line">*功能：插入新结点</div><div class="line">************************************************************/</div><div class="line"><span class="keyword">void</span> BinarySearchTree::InsertBSTNode(<span class="keyword">int</span> tempKey)</div><div class="line">&#123;</div><div class="line">	BinarySearchTreeNode *pre=<span class="literal">NULL</span>,*cur=<span class="keyword">this</span>-&gt;Root;</div><div class="line">	<span class="keyword">while</span>(cur!=<span class="literal">NULL</span>)</div><div class="line">	&#123;</div><div class="line">		pre=cur;</div><div class="line">		<span class="keyword">if</span>(cur-&gt;key&gt;tempKey)<span class="comment">//tempKey插到左子树</span></div><div class="line">			cur=cur-&gt;leftChild;</div><div class="line">		<span class="keyword">else</span> cur=cur-&gt;rightChild;<span class="comment">//插到左子树</span></div><div class="line">	&#125;</div><div class="line">	BinarySearchTreeNode *tempNode=<span class="keyword">new</span> BinarySearchTreeNode(tempKey);</div><div class="line">	<span class="keyword">if</span>(pre==<span class="literal">NULL</span>)<span class="comment">//若插入的为根节点</span></div><div class="line">	&#123;</div><div class="line">		<span class="keyword">this</span>-&gt;Root=tempNode;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">else</span> <span class="keyword">if</span>(pre-&gt;key&gt;tempNode-&gt;key)</div><div class="line">		pre-&gt;leftChild=tempNode;</div><div class="line">	<span class="keyword">else</span> pre-&gt;rightChild=tempNode;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="更新节点元素"><a href="#更新节点元素" class="headerlink" title="更新节点元素"></a>更新节点元素</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**********************************************************</span></div><div class="line">*参数：待修改数值oldKey,修改后的数值newKey</div><div class="line">*返回值：空</div><div class="line">*功能：更新节点元素</div><div class="line">************************************************************/</div><div class="line"><span class="keyword">void</span> BinarySearchTree::UpdataBSTNode(<span class="keyword">int</span> oldKey,<span class="keyword">int</span> newKey)</div><div class="line">&#123;</div><div class="line">	DeleteBSTNode(oldKey);</div><div class="line">	InsertBSTNode(newKey);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="删除左右孩子有为空的情况"><a href="#删除左右孩子有为空的情况" class="headerlink" title="删除左右孩子有为空的情况"></a>删除左右孩子有为空的情况</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**********************************************************</span></div><div class="line">*参数：pre待删除节点的父节点，cur待删除节点</div><div class="line">*返回值：空</div><div class="line">*功能：删除左右孩子有为空的情况</div><div class="line">************************************************************/</div><div class="line"><span class="keyword">void</span> BinarySearchTree::DeleteNoOrOneChildBSTNode(BinarySearchTreeNode *pre,BinarySearchTreeNode *cur)</div><div class="line">&#123;</div><div class="line">	<span class="keyword">if</span>(<span class="literal">NULL</span>==cur-&gt;leftChild&amp;&amp;<span class="literal">NULL</span>==cur-&gt;rightChild)<span class="comment">//左右孩子为空</span></div><div class="line">	&#123;</div><div class="line">		<span class="keyword">if</span>(<span class="literal">NULL</span>==pre)</div><div class="line">			Root=<span class="literal">NULL</span>;</div><div class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(pre-&gt;leftChild==cur)</div><div class="line">			pre-&gt;leftChild=<span class="literal">NULL</span>;</div><div class="line">		<span class="keyword">else</span> pre-&gt;rightChild=<span class="literal">NULL</span>;</div><div class="line">		<span class="keyword">delete</span> cur;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">else</span> <span class="keyword">if</span>(cur-&gt;rightChild!=<span class="literal">NULL</span>)<span class="comment">//若右子树不为空</span></div><div class="line">	&#123;</div><div class="line">		<span class="keyword">if</span>(<span class="literal">NULL</span>==pre)</div><div class="line">			Root=cur-&gt;rightChild;</div><div class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(pre-&gt;leftChild==cur)</div><div class="line">			pre-&gt;leftChild=cur-&gt;rightChild;</div><div class="line">		<span class="keyword">else</span> </div><div class="line">			pre-&gt;rightChild=cur-&gt;rightChild;</div><div class="line">		<span class="keyword">delete</span> cur;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">else</span> <span class="keyword">if</span>(cur-&gt;leftChild!=<span class="literal">NULL</span>)<span class="comment">//若左子树不为空</span></div><div class="line">	&#123;</div><div class="line">		<span class="keyword">if</span>(<span class="literal">NULL</span>==pre)</div><div class="line">			Root=cur-&gt;leftChild;</div><div class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(pre-&gt;leftChild==cur)</div><div class="line">			pre-&gt;leftChild=cur-&gt;leftChild;</div><div class="line">		<span class="keyword">else</span></div><div class="line">			pre-&gt;rightChild=cur-&gt;leftChild;</div><div class="line">		<span class="keyword">delete</span> cur;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="删除元素主函数"><a href="#删除元素主函数" class="headerlink" title="删除元素主函数"></a>删除元素主函数</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**********************************************************</span></div><div class="line">*参数：待删除节点元素</div><div class="line">*返回值：空</div><div class="line">*功能：删除元素主函数</div><div class="line">************************************************************/</div><div class="line"><span class="keyword">bool</span> BinarySearchTree::DeleteBSTNode(<span class="keyword">int</span> tempKey)</div><div class="line">&#123;</div><div class="line">	BinarySearchTreeNode *pre=<span class="literal">NULL</span>,*cur=Root;</div><div class="line">	<span class="keyword">while</span>(cur!=<span class="literal">NULL</span>)<span class="comment">//寻找待删除元素</span></div><div class="line">	&#123;</div><div class="line">		<span class="keyword">if</span>(cur-&gt;key==tempKey)</div><div class="line">			<span class="keyword">break</span>;</div><div class="line">		<span class="keyword">else</span></div><div class="line">		&#123;</div><div class="line">			pre=cur;</div><div class="line">			<span class="keyword">if</span>(cur-&gt;key&gt;tempKey)</div><div class="line">				cur=cur-&gt;leftChild;</div><div class="line">			<span class="keyword">else</span> cur=cur-&gt;rightChild;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">if</span>(<span class="literal">NULL</span>==cur)<span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">	<span class="keyword">if</span>(<span class="literal">NULL</span>==cur-&gt;leftChild||<span class="literal">NULL</span>==cur-&gt;rightChild)</div><div class="line">		DeleteNoOrOneChildBSTNode(pre,cur);</div><div class="line">	<span class="keyword">else</span> <span class="comment">//左右子树都不为空</span></div><div class="line">	&#123;</div><div class="line">		BinarySearchTreeNode *rPre=cur,*rCur=cur-&gt;rightChild;<span class="comment">//找到右子树最小元素</span></div><div class="line">		<span class="keyword">while</span>(rCur-&gt;leftChild!=<span class="literal">NULL</span>)</div><div class="line">		&#123;</div><div class="line">			rPre=rCur;</div><div class="line">			rCur=rCur-&gt;leftChild;</div><div class="line">		&#125;</div><div class="line">		cur-&gt;key=rCur-&gt;key;</div><div class="line">		DeleteNoOrOneChildBSTNode(rPre,rCur);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="前序遍历二叉查找树"><a href="#前序遍历二叉查找树" class="headerlink" title="前序遍历二叉查找树"></a>前序遍历二叉查找树</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**********************************************************</span></div><div class="line">*参数：当前子树根节点</div><div class="line">*返回值：空</div><div class="line">*功能：前序遍历二叉查找树</div><div class="line">************************************************************/</div><div class="line"><span class="keyword">void</span> BinarySearchTree::PreOrderBSTPrint(BinarySearchTreeNode *tempRoot)</div><div class="line">&#123;</div><div class="line">	<span class="keyword">if</span>(<span class="literal">NULL</span>==tempRoot)</div><div class="line">		<span class="keyword">return</span> ;</div><div class="line">	<span class="built_in">cout</span>&lt;&lt;tempRoot-&gt;key&lt;&lt;<span class="string">"    "</span>;</div><div class="line">	PreOrderBSTPrint(tempRoot-&gt;leftChild);</div><div class="line">	PreOrderBSTPrint(tempRoot-&gt;rightChild);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="中序遍历二叉查找树"><a href="#中序遍历二叉查找树" class="headerlink" title="中序遍历二叉查找树"></a>中序遍历二叉查找树</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**********************************************************</span></div><div class="line">*参数：当前子树根节点</div><div class="line">*返回值：空</div><div class="line">*功能：中序遍历二叉查找树</div><div class="line">************************************************************/</div><div class="line"><span class="keyword">void</span> BinarySearchTree::InOrderBSTPrint(BinarySearchTreeNode *tempRoot)</div><div class="line">&#123;</div><div class="line">	<span class="keyword">if</span>(<span class="literal">NULL</span>==tempRoot)</div><div class="line">		<span class="keyword">return</span> ;</div><div class="line">	InOrderBSTPrint(tempRoot-&gt;leftChild);</div><div class="line">	<span class="built_in">cout</span>&lt;&lt;tempRoot-&gt;key&lt;&lt;<span class="string">"    "</span>;</div><div class="line">	InOrderBSTPrint(tempRoot-&gt;rightChild);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="后序遍历二叉查找树树"><a href="#后序遍历二叉查找树树" class="headerlink" title="后序遍历二叉查找树树"></a>后序遍历二叉查找树树</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**********************************************************</span></div><div class="line">*参数：当前子树根节点</div><div class="line">*返回值：空</div><div class="line">*功能：后序遍历二叉查找树树</div><div class="line">************************************************************/</div><div class="line"><span class="keyword">void</span> BinarySearchTree::SufOrderBSTPrint(BinarySearchTreeNode *tempRoot)</div><div class="line">&#123;</div><div class="line">	<span class="keyword">if</span>(<span class="literal">NULL</span>==tempRoot)</div><div class="line">		<span class="keyword">return</span> ;</div><div class="line">	SufOrderBSTPrint(tempRoot-&gt;leftChild);</div><div class="line">	SufOrderBSTPrint(tempRoot-&gt;rightChild);</div><div class="line">	<span class="built_in">cout</span>&lt;&lt;tempRoot-&gt;key&lt;&lt;<span class="string">"    "</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="翻转打印二叉查找树"><a href="#翻转打印二叉查找树" class="headerlink" title="翻转打印二叉查找树"></a>翻转打印二叉查找树</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**********************************************************</span></div><div class="line">*参数：当前子树根节点，缩进列数</div><div class="line">*返回值：空</div><div class="line">*功能：翻转打印二叉查找树</div><div class="line">************************************************************/</div><div class="line"><span class="keyword">void</span> BinarySearchTree::RotateBSTPrint(BinarySearchTreeNode *tempRoot,<span class="keyword">int</span> tempColumn)</div><div class="line">&#123;</div><div class="line">	<span class="keyword">if</span>(<span class="literal">NULL</span>==tempRoot)</div><div class="line">		<span class="keyword">return</span> ;</div><div class="line">	RotateBSTPrint(tempRoot-&gt;leftChild,tempColumn+<span class="number">1</span>);</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;tempColumn;i++)</div><div class="line">		<span class="built_in">cout</span>&lt;&lt;<span class="string">"    "</span>;</div><div class="line">	<span class="built_in">cout</span>&lt;&lt;<span class="string">"---"</span>&lt;&lt;tempRoot-&gt;key&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">	RotateBSTPrint(tempRoot-&gt;rightChild,tempColumn+<span class="number">1</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="test-example"><a href="#test-example" class="headerlink" title="test example"></a>test example</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">int</span> val;</div><div class="line">	<span class="keyword">while</span>(<span class="literal">true</span>)</div><div class="line">	&#123;</div><div class="line">		BinarySearchTree myBinarySearchTree;</div><div class="line">		<span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;val)</div><div class="line">		&#123;</div><div class="line">			<span class="keyword">if</span>(val==<span class="number">0</span>)<span class="keyword">break</span>;</div><div class="line">			myBinarySearchTree.InsertBSTNode(val);</div><div class="line">		&#125;</div><div class="line">		<span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>&lt;&lt;<span class="string">"*****************************"</span>&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">		myBinarySearchTree.PreOrderBSTPrint(myBinarySearchTree.GetRoot());</div><div class="line">		<span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>&lt;&lt;<span class="string">"============================="</span>&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">		myBinarySearchTree.InOrderBSTPrint(myBinarySearchTree.GetRoot());</div><div class="line">		<span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>&lt;&lt;<span class="string">"============================="</span>&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">		myBinarySearchTree.SufOrderBSTPrint(myBinarySearchTree.GetRoot());</div><div class="line">		<span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>&lt;&lt;<span class="string">"============================="</span>&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">		myBinarySearchTree.RotateBSTPrint(myBinarySearchTree.GetRoot(),<span class="number">0</span>);</div><div class="line">		<span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>&lt;&lt;<span class="string">"*****************************"</span>&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">		<span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;val)</div><div class="line">		&#123;</div><div class="line">			<span class="keyword">if</span>(!val)<span class="keyword">break</span>;</div><div class="line">			myBinarySearchTree.DeleteBSTNode(val);</div><div class="line">			<span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>&lt;&lt;<span class="string">"*****************************"</span>&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">			myBinarySearchTree.PreOrderBSTPrint(myBinarySearchTree.GetRoot());</div><div class="line">			<span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>&lt;&lt;<span class="string">"============================="</span>&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">			myBinarySearchTree.InOrderBSTPrint(myBinarySearchTree.GetRoot());</div><div class="line">			<span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>&lt;&lt;<span class="string">"============================="</span>&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">			myBinarySearchTree.SufOrderBSTPrint(myBinarySearchTree.GetRoot());</div><div class="line">			<span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>&lt;&lt;<span class="string">"============================="</span>&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">			myBinarySearchTree.RotateBSTPrint(myBinarySearchTree.GetRoot(),<span class="number">0</span>);</div><div class="line">			<span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>&lt;&lt;<span class="string">"*****************************"</span>&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	system(<span class="string">"pause"</span>);</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;github&lt;/strong&gt; : &lt;a href=&quot;https://github.com/ckj258/DataStructure/tree/master/%E4%BA%8C%E5%8F%89%E6%9F%A5%E6%89%BE%E6%A0%91&quot;&gt;https://github.com/ckj258/DataStructure/tree/master/%E4%BA%8C%E5%8F%89%E6%9F%A5%E6%89%BE%E6%A0%91&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="数据结构" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>redis配置参数说明</title>
    <link href="http://yoursite.com/2017/01/17/redis_option/"/>
    <id>http://yoursite.com/2017/01/17/redis_option/</id>
    <published>2017-01-17T02:32:49.000Z</published>
    <updated>2017-01-23T02:46:54.290Z</updated>
    
    <content type="html"><![CDATA[<h2 id="redis配置参数说明"><a href="#redis配置参数说明" class="headerlink" title="redis配置参数说明"></a>redis配置参数说明</h2><p><a id="more"></a>参数说明<br>redis.conf 配置项说明如下：</p>
<ol>
<li>Redis默认不是以守护进程的方式运行，可以通过该配置项修改，使用yes启用守护进程         <font color="red"> <strong>daemonize no</strong></font></li>
<li>当Redis以守护进程方式运行时，Redis默认会把pid写入/var/run/redis.pid文件，可以通过pidfile指定         <font color="red"><strong>pidfile /var/run/redis.pid</strong></font></li>
<li>指定Redis监听端口，默认端口为6379，作者在自己的一篇博文中解释了为什么选用6379作为默认端口，因为6379在手机按键上MERZ对应的号码，而MERZ取自意大利歌女Alessia Merz的名字         <font color="red"><strong>port 6379</strong></font>   </li>
<li>绑定的主机地址         <font color="red"><strong>bind 127.0.0.1</strong></font>  </li>
<li>当 客户端闲置多长时间后关闭连接，如果指定为0，表示关闭该功能         <font color="red"><strong>timeout 300</strong></font>  </li>
<li>指定日志记录级别，Redis总共支持四个级别：debug、verbose、notice、warning，默认为verbose         <font color="red"><strong>loglevel verbose</strong></font>  </li>
<li>日志记录方式，默认为标准输出，如果配置Redis为守护进程方式运行，而这里又配置为日志记录方式为标准输出，则日志将会发送给/dev/null         <font color="red"><strong>logfile stdout</strong></font>  </li>
<li>设置数据库的数量，默认数据库为0，可以使用SELECT <dbid>命令在连接上指定数据库id         <font color="red"><strong>databases 16</strong></font> </dbid></li>
<li>指定在多长时间内，有多少次更新操作，就将数据同步到数据文件，可以多个条件配合<br><font color="red"><strong>save seconds changes</strong></font><br> Redis默认配置文件中提供了三个条件：<br> save 900 1<br> save 300 10<br> save 60 10000<br> 分别表示900秒（15分钟）内有1个更改，300秒（5分钟）内有10个更改以及60秒内有10000个更改。         </li>
<li>指定存储至本地数据库时是否压缩数据，默认为yes，Redis采用LZF压缩，如果为了节省CPU时间，可以关闭该选项，但会导致数据库文件变的巨大               <font color="red"><strong>rdbcompression yes</strong></font>                   </li>
<li>指定本地数据库文件名，默认值为dump.rdb               <font color="red"><strong>dbfilename dump.rdb</strong></font>                 </li>
<li>指定本地数据库存放目录         <font color="red"><strong>dir ./</strong></font>         </li>
<li>设置当本机为slav服务时，设置master服务的IP地址及端口，在Redis启动时，它会自动从master进行数据同步         <font color="red"><strong>slaveof <masterip> <masterport></masterport></masterip></strong></font>         </li>
<li>当master服务设置了密码保护时，slav服务连接master的密码         <font color="red"><strong>masterauth <master-password></master-password></strong></font>         </li>
<li>设置Redis连接密码，如果配置了连接密码，客户端在连接Redis时需要通过AUTH <password>命令提供密码，默认关闭         <font color="red"><strong>  requirepass foobared</strong></font>         </password></li>
<li>设置同一时间最大客户端连接数，默认无限制，Redis可以同时打开的客户端连接数为Redis进程可以打开的最大文件描述符数，<br>如果设置 maxclients 0，表示不作限制。当客户端连接数到达限制时，Redis会关闭新的连接并向客户端返回max number of clients reached错误信息          <font color="red"><strong> maxclients 128</strong></font>          </li>
<li>指定Redis最大内存限制，Redis在启动时会把数据加载到内存中，达到最大内存后，Redis会先尝试清除已到期或即将到期的Key，当此方法处理 后，<br>仍然到达最大内存设置，将无法再进行写入操作，但仍然可以进行读取操作。Redis新的vm机制，会把Key存放内存，Value会存放在swap区          <font color="red"><strong> maxmemory <bytes></bytes></strong></font>          </li>
<li>指定是否在每次更新操作后进行日志记录，Redis在默认情况下是异步的把数据写入磁盘，如果不开启，可能会在断电时导致一段时间内的数据丢失。<br>因为 redis本身同步数据文件是按上面save条件来同步的，所以有的数据会在一段时间内只存在于内存中。默认为no         <font color="red"><strong>appendonly no</strong></font>          </li>
<li>指定更新日志文件名，默认为appendonly.aof         <font color="red"><strong>appendfilename appendonly.aof</strong></font>          </li>
<li>指定更新日志条件，共有3个可选值：<br>no：表示等操作系统进行数据缓存同步到磁盘（快）<br>always：表示每次更新操作后手动调用fsync()将数据写到磁盘（慢，安全）<br>everysec：表示每秒同步一次（折衷，默认值）         <font color="red"><strong>appendfsync everysec</strong></font>          </li>
<li>指定是否启用虚拟内存机制，默认值为no，简单的介绍一下，VM机制将数据分页存放，<br>由Redis将访问量较少的页即冷数据swap到磁盘上，访问多的页面由磁盘自动换出到内存中（在后面的文章我会仔细分析Redis的VM机制）         <font color="red"><strong>vm-enabled no</strong></font>          </li>
<li>虚拟内存文件路径，默认值为/tmp/redis.swap，不可多个Redis实例共享          <font color="red"><strong>vm-swap-file /tmp/redis.swap</strong></font>          </li>
<li>将所有大于vm-max-memory的数据存入虚拟内存,无论vm-max-memory设置多小,<br>所有索引数据都是内存存储的(Redis的索引数据 就是keys),也就是说,当vm-max-memory设置为0的时候,其实是所有value都存在于磁盘。默认值为0         <font color="red"><strong> vm-max-memory 0</strong></font>           </li>
<li>Redis swap文件分成了很多的page，一个对象可以保存在多个page上面，但一个page上不能被多个对象共享，vm-page-size是要根据存储的 数据大小来设定的，<br>作者建议如果存储很多小对象，page大小最好设置为32或者64bytes；如果存储很大大对象，则可以使用更大的page，如果不 确定，就使用默认值          <font color="red"><strong> vm-page-size 32</strong></font>          </li>
<li>设置swap文件中的page数量，由于页表（一种表示页面空闲或使用的bitmap）是在放在内存中的，，在磁盘上每8个pages将消耗1byte的内存。         <font color="red"><strong> vm-pages 134217728</strong></font>          </li>
<li>设置访问swap文件的线程数,最好不要超过机器的核数,如果设置为0,那么所有对swap文件的操作都是串行的，可能会造成比较长时间的延迟。默认值为4           <font color="red"><strong>vm-max-threads 4</strong></font>          </li>
<li>设置在向客户端应答时，是否把较小的包合并为一个包发送，默认为开启         <font color="red"><strong> glueoutputbuf yes </strong></font>          </li>
<li>指定在超过一定的数量或者最大的元素超过某一临界值时，采用一种特殊的哈希算法          <font color="red"><strong> hash-max-zipmap-value 512 </strong></font>           </li>
<li>指定是否激活重置哈希，默认为开启（后面在介绍Redis的哈希算法时具体介绍）         <font color="red"><strong> activerehashing yes </strong></font>          </li>
<li>指定包含其它的配置文件，可以在同一主机上多个Redis实例之间使用同一份配置文件，而同时各个实例又拥有自己的特定配置文件         <font color="red"><strong> include /path/to/local.conf </strong></font>          


</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;redis配置参数说明&quot;&gt;&lt;a href=&quot;#redis配置参数说明&quot; class=&quot;headerlink&quot; title=&quot;redis配置参数说明&quot;&gt;&lt;/a&gt;redis配置参数说明&lt;/h2&gt;&lt;p&gt;
    
    </summary>
    
    
      <category term="node.js学习" scheme="http://yoursite.com/tags/node-js%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>node调用redis</title>
    <link href="http://yoursite.com/2017/01/17/node_redis/"/>
    <id>http://yoursite.com/2017/01/17/node_redis/</id>
    <published>2017-01-17T01:55:52.000Z</published>
    <updated>2017-01-23T02:46:19.371Z</updated>
    
    <content type="html"><![CDATA[<p>REmote DIctionary Server(Redis) 是一个由Salvatore Sanfilippo写的key-value存储系统。<br>Redis是一个开源的使用ANSI C语言编写、遵守BSD协议、支持网络、可基于内存亦可持久化的日志型、Key-Value数据库，并提供多种语言的API。   </p>
<a id="more"></a>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install redis</div></pre></td></tr></table></figure>
<h2 id="使用案例"><a href="#使用案例" class="headerlink" title="使用案例"></a>使用案例</h2><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> password = <span class="string">"ckj258"</span>;</div><div class="line"><span class="keyword">var</span> redis_host = <span class="string">"127.0.0.1"</span>;</div><div class="line"><span class="keyword">var</span> redis_port = <span class="number">3101</span>;</div><div class="line"><span class="keyword">var</span> redis_options = &#123;<span class="string">"no_ready_check"</span>:config.redis.no_ready_check&#125;;</div><div class="line"></div><div class="line"><span class="keyword">var</span> client;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">init</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="built_in">console</span>.log(<span class="string">'init redis ... ... '</span>);</div><div class="line">	client = redis.createClient(redis_port, redis_host, redis_options);</div><div class="line">	client.on(<span class="string">"error"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</div><div class="line">  		<span class="built_in">console</span>.log(<span class="string">"redis meet Error "</span> + err + <span class="string">';'</span> + redis_host + <span class="string">';'</span> + redis_port);</div><div class="line">  		setTimeout(init, <span class="number">5</span>*<span class="number">1000</span>);	<span class="comment">// 5秒后重连</span></div><div class="line">	&#125;);</div><div class="line">	client.auth(password);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="setVaule"><a href="#setVaule" class="headerlink" title="setVaule"></a>setVaule</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">setVaule</span>(<span class="params">key, values</span>) </span>&#123;</div><div class="line">	client.set(key, values);</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="setValueWithExpire"><a href="#setValueWithExpire" class="headerlink" title="setValueWithExpire"></a>setValueWithExpire</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">setValueWithExpire</span>(<span class="params">key, values</span>) </span>&#123;</div><div class="line">	client.set(key, values);</div><div class="line">	client.expire(key, expire);	<span class="comment">// 单位秒</span></div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="getVaule"><a href="#getVaule" class="headerlink" title="getVaule"></a>getVaule</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getVaule</span>(<span class="params">key, callback </span>) </span>&#123;</div><div class="line">	client.get(key, <span class="function"><span class="keyword">function</span>(<span class="params">err, redis_result</span>) </span>&#123;</div><div class="line">		callback(err, redis_result);</div><div class="line">	&#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="delVaule"><a href="#delVaule" class="headerlink" title="delVaule"></a>delVaule</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">del</span>(<span class="params">key</span>) </span>&#123;</div><div class="line">	client.del(key);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="test"><a href="#test" class="headerlink" title="test"></a>test</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">init();</div><div class="line">setVaule(&quot;name&quot;,&quot;Dantel&quot;);</div><div class="line">getVaule(&quot;name&quot;,function(err,redis_result)</div><div class="line">&#123;	</div><div class="line">	if(!error)</div><div class="line">	&#123;</div><div class="line">		console.log(redis_result);</div><div class="line">	&#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h3 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h3><p><img src="/assets/image/node_redis_1.png" alt="">  </p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;REmote DIctionary Server(Redis) 是一个由Salvatore Sanfilippo写的key-value存储系统。&lt;br&gt;Redis是一个开源的使用ANSI C语言编写、遵守BSD协议、支持网络、可基于内存亦可持久化的日志型、Key-Value数据库，并提供多种语言的API。   &lt;/p&gt;
    
    </summary>
    
    
      <category term="node.js学习" scheme="http://yoursite.com/tags/node-js%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>redis的安装与部署</title>
    <link href="http://yoursite.com/2017/01/17/redis_generate/"/>
    <id>http://yoursite.com/2017/01/17/redis_generate/</id>
    <published>2017-01-17T01:55:52.000Z</published>
    <updated>2017-01-23T02:46:48.804Z</updated>
    
    <content type="html"><![CDATA[<p>REmote DIctionary Server(Redis) 是一个由Salvatore Sanfilippo写的key-value存储系统。<br>Redis是一个开源的使用ANSI C语言编写、遵守BSD协议、支持网络、可基于内存亦可持久化的日志型、Key-Value数据库，并提供多种语言的API。   </p>
<a id="more"></a>
<h2 id="运行redis"><a href="#运行redis" class="headerlink" title="运行redis"></a>运行redis</h2><h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><p>下载地址 ：<a href="https://redis.io/" target="_blank" rel="external">https://redis.io/</a><br>Redis 支持 32 位和 64 位。<br>这个需要根据你系统平台的实际情况选择，这里我们下载 Redis-x64-xxx.zip,解压后，将文件夹重新命名为 redis。        </p>
<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>Redis 的配置文件位于 Redis 安装目录下，文件名为 redis.conf。<br>参数说明 : <a href="https://ckj258.github.io/2017/01/17/redis_option/" target="_blank" rel="external">https://ckj258.github.io/2017/01/17/redis_option/</a>    </p>
<h3 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h3><p>打开一个 cmd 窗口 使用cd命令切换目录/redis 运行 redis-server redis.conf。<br><img src="/assets/image/redis_running.png" alt="">   </p>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>这时候另启一个cmd窗口，原来的不要关闭，不然就无法访问服务端了。<br>切换到redis目录下运行  redis-cli -h host -p port -a password(redis-cli -h 127.0.0.1 -p 6379)。<br>设置键值对 set name Dantel<br>取出键值对 get name<br><img src="/assets/image/redis_running2.png" alt="">   </p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;REmote DIctionary Server(Redis) 是一个由Salvatore Sanfilippo写的key-value存储系统。&lt;br&gt;Redis是一个开源的使用ANSI C语言编写、遵守BSD协议、支持网络、可基于内存亦可持久化的日志型、Key-Value数据库，并提供多种语言的API。   &lt;/p&gt;
    
    </summary>
    
    
      <category term="node.js学习" scheme="http://yoursite.com/tags/node-js%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>pomelo学习入门笔记</title>
    <link href="http://yoursite.com/2016/12/20/pomelo-chatserver/"/>
    <id>http://yoursite.com/2016/12/20/pomelo-chatserver/</id>
    <published>2016-12-20T08:55:19.000Z</published>
    <updated>2017-01-23T02:46:32.226Z</updated>
    
    <content type="html"><![CDATA[<p>github : <a href="https://github.com/ckj258/PomeloClient/game-server" target="_blank" rel="external">https://github.com/ckj258/PomeloClient/game-server</a></p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>pomelo是一个游戏服务器框架，使用很简单。<br>它包括基础开发框架和一系列相关工具和库，可以帮助开发者省去游戏开发中枯燥的重复劳动和底层逻辑工作，<br>让开发者可以更多地去关注游戏的具体逻辑，大大提高开发效率。    </p>
<a id="more"></a>
<h2 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h2><p><img src="/assets/image/pomelo_screenshot3.png" alt=""><br>../app/：         存放游戏逻辑脚本<br>../config/:       存放配置文件<br>../logs/:         存放历史日志<br>../node_modules/: 存放用到的npm包<br>../app.js：       pomelo入口<br>../package.json:  npm包配置文件</p>
<h2 id="运行架构"><a href="#运行架构" class="headerlink" title="运行架构"></a>运行架构</h2><p><img src="/assets/image/multi-chat.png" alt=""> </p>
<h2 id="代码架构"><a href="#代码架构" class="headerlink" title="代码架构"></a>代码架构</h2><p>app.js中声明了”connector”,”gate”,”chat”服务器<br>服务器配置信息在config目录下，servers.json配置具体的应用服务器信息。<br>在配置文件中，分为development和production两种环境，表示开发环境和产品环境<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">app.configure(&apos;production|development&apos;, &apos;connector&apos;, function()&#123;</div><div class="line">	app.set(&apos;connectorConfig&apos;,</div><div class="line">		&#123;</div><div class="line">			connector : pomelo.connectors.hybridconnector,</div><div class="line">			heartbeat : 3,</div><div class="line">			useDict : true,</div><div class="line">			useProtobuf : true</div><div class="line">		&#125;);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">app.configure(&apos;production|development&apos;, &apos;gate&apos;, function()&#123;</div><div class="line">	app.set(&apos;connectorConfig&apos;,</div><div class="line">		&#123;</div><div class="line">			connector : pomelo.connectors.hybridconnector,</div><div class="line">			useProtobuf : true</div><div class="line">		&#125;);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">// app configure</div><div class="line">app.configure(&apos;production|development&apos;, function() &#123;</div><div class="line">	// route configures</div><div class="line">	app.route(&apos;chat&apos;, routeUtil.chat);</div><div class="line"></div><div class="line">	// filter configures</div><div class="line">	app.filter(pomelo.timeout());</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<h3 id="“chat”服务器"><a href="#“chat”服务器" class="headerlink" title="“chat”服务器"></a>“chat”服务器</h3><p>../servers/chat目录下包含hander和remote两个文件夹，<br>其中hander下主要存放监听器，负责接收客户端发送请求做相应处理</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">handler.send = function(msg, session, next) &#123;</div><div class="line">	var rid = session.get(&apos;rid&apos;);</div><div class="line">	var username = session.uid.split(&apos;*&apos;)[0];</div><div class="line">	var channelService = this.app.get(&apos;channelService&apos;);</div><div class="line">	var param = &#123;</div><div class="line">		msg: msg.content,</div><div class="line">		from: username,</div><div class="line">		target: msg.target</div><div class="line">	&#125;;</div><div class="line">	channel = channelService.getChannel(rid, false);</div><div class="line"></div><div class="line">	//the target is all users</div><div class="line">	if(msg.target == &apos;*&apos;) &#123;</div><div class="line">		channel.pushMessage(&apos;onChat&apos;, param);</div><div class="line">	&#125;</div><div class="line">	//the target is specific user</div><div class="line">	else &#123;</div><div class="line">		var tuid = msg.target + &apos;*&apos; + rid;</div><div class="line">		var tsid = channel.getMember(tuid)[&apos;sid&apos;];</div><div class="line">		channelService.pushMessageByUids(&apos;onChat&apos;, param, [&#123;</div><div class="line">			uid: tuid,</div><div class="line">			sid: tsid</div><div class="line">		&#125;]);</div><div class="line">	&#125;</div><div class="line">	next(null, &#123;</div><div class="line">		route: msg.route</div><div class="line">	&#125;);</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>send方法主要功能是接收客户端发送的聊天信息，并广播给同channel下玩家，回调函数next()返回客户端错误码        </p>
<p>至于remote，当有客户端连接到connector上后，connector会向chat.remote发起远程过程调用，chat.remote会将登录的用户，加到对应的channel中        </p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;github : &lt;a href=&quot;https://github.com/ckj258/PomeloClient/game-server&quot;&gt;https://github.com/ckj258/PomeloClient/game-server&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;pomelo是一个游戏服务器框架，使用很简单。&lt;br&gt;它包括基础开发框架和一系列相关工具和库，可以帮助开发者省去游戏开发中枯燥的重复劳动和底层逻辑工作，&lt;br&gt;让开发者可以更多地去关注游戏的具体逻辑，大大提高开发效率。    &lt;/p&gt;
    
    </summary>
    
    
      <category term="pomelo" scheme="http://yoursite.com/tags/pomelo/"/>
    
  </entry>
  
  <entry>
    <title>pomelo服务器与cocos2d交互</title>
    <link href="http://yoursite.com/2016/12/13/pomelo-libpomelo/"/>
    <id>http://yoursite.com/2016/12/13/pomelo-libpomelo/</id>
    <published>2016-12-13T06:30:00.000Z</published>
    <updated>2017-01-23T02:46:42.866Z</updated>
    
    <content type="html"><![CDATA[<p>github : <a href="https://github.com/ckj258/PomeloClient/" target="_blank" rel="external">https://github.com/ckj258/PomeloClient/</a></p>
<p>Pomelo 是基于 Node.js 的高性能、分布式游戏服务器框架。<br>非常适合用来开发轻量级手游。<br>之前一直在用pomelo-cocos2dx架构，在此记录一下使用心得。  </p>
<a id="more"></a>
<h2 id="运行项目"><a href="#运行项目" class="headerlink" title="运行项目"></a>运行项目</h2><h3 id="Client"><a href="#Client" class="headerlink" title="Client"></a>Client</h3><p>coco2dx引擎版本3.10，拷贝引擎文件至根目录编译，运行  </p>
<h3 id="Server"><a href="#Server" class="headerlink" title="Server"></a>Server</h3><p>cd game-server<br><br>npm install<br><br>pomelo start<br></p>
<h2 id="类详解"><a href="#类详解" class="headerlink" title="类详解"></a>类详解</h2><h3 id="PomeloSocket"><a href="#PomeloSocket" class="headerlink" title="PomeloSocket"></a>PomeloSocket</h3><p>负责与server的交互<br>主要方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">	void conConnect(const char*ServerIP, int ServerPort	);//建立连接</div><div class="line">	void quit();										  //断开连接</div><div class="line"></div><div class="line">/* ==============================================================================</div><div class="line"> * 功能描述：发送事件,回调函数 typedef void (*pc_notify_cb_t)(const pc_notify_t* req, int rc);  rc表示错误码,无参数返回. 例用于上传游戏数据等等</div><div class="line"> * 创 建 者：ckj</div><div class="line"> * 创建日期：2016年12月13日17:30:49</div><div class="line"> * ==============================================================================*/</div><div class="line">	void sendEvents(const char* params, const char*remote, pc_notify_cb_t event_cb);</div><div class="line">/* ==============================================================================</div><div class="line"> * 功能描述：发送请求,回调函数 typedef void (*pc_request_cb_t)(const pc_request_t* req, int rc, const char* resp);  rc表示错误码,resp为服务器json结构. 例用于登录等需要返回结果的场景  </div><div class="line"> * 创 建 者：ckj</div><div class="line"> * 创建日期：2016年12月13日17:33:53</div><div class="line"> * ==============================================================================*/</div><div class="line">	void sendRequest(const char* params, const char*remote, pc_request_cb_t request_cb);</div></pre></td></tr></table></figure></p>
<h3 id="PomeloHandler"><a href="#PomeloHandler" class="headerlink" title="PomeloHandler"></a>PomeloHandler</h3><p>观察者模式中的观察者，负责向游戏中注册监听的对象发放广播<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">void addHandlerListen(PomeloListen* listen);//添加监听listen</div></pre></td></tr></table></figure></p>
<h3 id="PomeloListen"><a href="#PomeloListen" class="headerlink" title="PomeloListen"></a>PomeloListen</h3><p>观察者模式中的对象，一个纯虚类，负责接收消息<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">virtual void handle_event(const char* msgId, const char* msgBody)=0;  //msgId为服务器notify分发的remote</div></pre></td></tr></table></figure></p>
<h2 id="调用方法"><a href="#调用方法" class="headerlink" title="调用方法"></a>调用方法</h2><p>因为pomelo基于分布式游戏服务器框架，所以进入游戏时最好通过http请求获取TCP连接ip和port<br>然后调用onConnect建立连接</p>
<p>游戏中将需要注册监听的对象继承PomeloListen，重写handle_event()方法即可<br>具体示例见ChatDialog.hpp ChatDialog.cpp</p>
<h2 id="效果截图"><a href="#效果截图" class="headerlink" title="效果截图"></a>效果截图</h2><p><img src="/assets/image/pomelo_screenshot1.png" alt=""><br><img src="/assets/image/pomelo_screenshot2.png" alt="">  </p>
<p>界面粗糙，请勿见怪</p>
<h2 id="platform"><a href="#platform" class="headerlink" title="platform"></a>platform</h2><p>android和mac自行链接对应库文件</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;github : &lt;a href=&quot;https://github.com/ckj258/PomeloClient/&quot;&gt;https://github.com/ckj258/PomeloClient/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Pomelo 是基于 Node.js 的高性能、分布式游戏服务器框架。&lt;br&gt;非常适合用来开发轻量级手游。&lt;br&gt;之前一直在用pomelo-cocos2dx架构，在此记录一下使用心得。  &lt;/p&gt;
    
    </summary>
    
    
      <category term="pomelo" scheme="http://yoursite.com/tags/pomelo/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2016/12/07/hello-world/"/>
    <id>http://yoursite.com/2016/12/07/hello-world/</id>
    <published>2016-12-07T03:54:00.000Z</published>
    <updated>2016-12-08T08:57:42.279Z</updated>
    
    <content type="html"><![CDATA[<p>前前后后折腾了一天，因为网速的关系，反反复复的安装，人生第一篇博客终于诞生。<br>在此感谢 ”沸沸腾“ 提供的教程<a href="http://www.jianshu.com/p/863f3f2d1733" target="_blank" rel="external">http://www.jianshu.com/p/863f3f2d1733</a><br>以及 yilia作者“litten”提供的简约主题</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前前后后折腾了一天，因为网速的关系，反反复复的安装，人生第一篇博客终于诞生。&lt;br&gt;在此感谢 ”沸沸腾“ 提供的教程&lt;a href=&quot;http://www.jianshu.com/p/863f3f2d1733&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;
    
    </summary>
    
    
      <category term="杂谈" scheme="http://yoursite.com/tags/%E6%9D%82%E8%B0%88/"/>
    
  </entry>
  
</feed>
