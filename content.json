[{"title":"pomelo服务器与cocos2d交互","date":"2016-12-13T06:30:00.000Z","path":"2016/12/13/pomelo-libpomelo/","text":"github : https://github.com/ckj258/PomeloClient/ Pomelo 是基于 Node.js 的高性能、分布式游戏服务器框架。非常适合用来开发轻量级手游客户端。之前一直在用pomelo-cocos2dx架构，在此记录一下使用心得。 ##运行项目 Clientcoco2dx引擎版本3.10，拷贝引擎文件至根目录编译，运行 Servercd game-servernpm installpomelo start ##类详解 ###PomeloSocket负责与server的交互主要方法123456789101112131415 void conConnect(const char*ServerIP, int ServerPort );//建立连接 void quit(); //断开连接/* ============================================================================== * 功能描述：发送事件,回调函数 typedef void (*pc_notify_cb_t)(const pc_notify_t* req, int rc); rc表示错误码,无参数返回. 例用于上传游戏数据等等 * 创 建 者：ckj * 创建日期：2016年12月13日17:30:49 * ==============================================================================*/ void sendEvents(const char* params, const char*remote, pc_notify_cb_t event_cb);/* ============================================================================== * 功能描述：发送请求,回调函数 typedef void (*pc_request_cb_t)(const pc_request_t* req, int rc, const char* resp); rc表示错误码,resp为服务器json结构. 例用于登录等需要返回结果的场景 * 创 建 者：ckj * 创建日期：2016年12月13日17:33:53 * ==============================================================================*/ void sendRequest(const char* params, const char*remote, pc_request_cb_t request_cb); ###PomeloHandler观察者模式中的观察者，负责向游戏中注册监听的对象发放广播1void addHandlerListen(PomeloListen* listen);//添加监听listen PomeloListen观察者模式中的对象，一个纯虚类，负责接收消息1virtual void handle_event(const char* msgId, const char* msgBody)=0; //msgId为服务器notify分发的remote ##调用方法因为pomelo基于分布式游戏服务器框架，所以进入游戏时最好通过http请求获取TCP连接ip和port然后调用onConnect建立连接 游戏中将需要注册监听的对象继承PomeloListen，重写handle_event()方法即可具体示例见ChatDialog.hpp ChatDialog.cpp ##效果截图 界面粗糙，请勿见怪 ##platform android和mac自行链接对应库文件END.2016年12月13日17:48:50 Dantel Chen.","tags":[{"name":"pomelo","slug":"pomelo","permalink":"http://yoursite.com/tags/pomelo/"}]},{"title":"Hello World","date":"2016-12-07T03:54:00.000Z","path":"2016/12/07/hello-world/","text":"前前后后折腾了一天，因为网速的关系，反反复复的安装，人生第一篇博客终于诞生。在此感谢 ”沸沸腾“ 提供的教程http://www.jianshu.com/p/863f3f2d1733以及 yilia作者“litten”提供的简约主题","tags":[{"name":"杂谈","slug":"杂谈","permalink":"http://yoursite.com/tags/杂谈/"}]},{"title":"生产者-消费者模型的coffeescript实现","date":"2012-12-24T15:51:00.000Z","path":"2012/12/24/coffee-pc/","text":"这两天一直在看coffeescript相关的东西，也帮一个朋友搞了个生产者-消费者模型的C语言实现。想到还没用coffeescript真正意义上写过程序，那就尝试做一下吧。 其实《CoffeeScript小书》是暑假实习时就买了，一直比较向往着函数式编程却拖延了很久没行动起来。小书只有几十页，本是github上一个开源的项目，我喜欢这种轻巧的文字。语法部分看下来，再看下类与继承，只花了半天的时间，而且心情非常愉悦，然后就可以开始我菜鸟的第一次试飞了。 生产者-消费者模型没什么好说的了，就是读写共享缓冲区，pv操作控制是否冲突。更多的就是冲着coffeescript来的。下面是一些凌乱但自认为有思考价值的记录，或许后续我会继续写一些coffeescript的学习笔记，再做深入的研究。 ##demo，可尝试点击“生产”“消费”按钮 ##litten如是想： 我一定要学一门，至少一门函数式风格编程语言，没有太深远的想法，就觉得它就是我的菜 这个程序是66行的coffeescript代码，最后编译后得到了122行的js代码，说明编程效率提升显著 括号，方括号，花括号，还有逗号有时候会多烦人，特别是使用过ExtJs的人，而coffeescript可以没有 用法简洁的jquery在coffeescript里面会更简洁 关于coffeescript的循环，它不推荐你使用for循环，而是使用“推导”，暴露在底层的循环只有while语法 事件绑定时，使用=&gt;可以免去js上下文切换this的麻烦 coffeescript的数组迭代方法非常的酷，三言两语说不清 javascript会是下一个JVM吗？ 站在产品的角度，我认为coffeescript这名字太长了-_-! ##附上源码12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667N = 10class ProCon data: mutex:1 empty:N full:0 front:0 rear:0 buf: [] init:-&gt; i = 0 while i&lt;N newDom = $('&lt;div class=\"bufBox\"&gt;&lt;div class=\"bufCover\"&gt;'+i+'&lt;/div&gt;'+i+'&lt;/div&gt;') $('#buf').append(newDom) @data.buf.push 'e' i++ $('#produce').click =&gt; @producer() $('#consume').click =&gt; @consumer() p:(num)-&gt; return --num v:(num)-&gt; return ++num produceItem:-&gt; $('&lt;p class=\"desPro\"&gt;生产了产品&lt;/p&gt;').insertBefore $(\"#des p:first\") return 'm' consumeItem:-&gt; $('&lt;p class=\"desCon\"&gt;消费了产品&lt;/p&gt;').insertBefore $(\"#des p:first\") enterItem:(item) -&gt; @data.front = (@data.front+1)%N @data.buf[@data.front] = item; str = \"存入产品#&#123;@data.buf[@data.front]&#125;到缓冲区#&#123;@data.front&#125;\" $(\"&lt;p class='desPro'&gt;#&#123;str&#125;&lt;/p&gt;\").insertBefore $(\"#des p:first\") $($('.bufCover')[@data.front]).animate \"height\":\"50px\" removeItem:-&gt; @data.rear = (@data.rear + 1) % N; @data.buf[@data.rear] = 'e'; str = \"取出产品#&#123;@data.buf[@data.rear]&#125;从缓冲区#&#123;@data.rear&#125;\" $(\"&lt;p class='desCon'&gt;#&#123;str&#125;&lt;/p&gt;\").insertBefore $(\"#des p:first\") $($('.bufCover')[@data.rear]).animate \"height\":\"0px\" producer:-&gt; if @data.full==N $(\"&lt;p class='desSpe'&gt;缓冲区已全满&lt;/p&gt;\").insertBefore $(\"#des p:first\") return item = @produceItem() @data.empty = @p(@data.empty) @data.mutex = @p(@data.mutex) @enterItem(item) @data.mutex = @v(@data.mutex) @data.full = @v(@data.full) consumer:-&gt; if @data.empty==N $(\"&lt;p class='desSpe'&gt;缓冲区已空&lt;/p&gt;\").insertBefore $(\"#des p:first\") return @data.full = @p(@data.full) @data.mutex = @p(@data.mutex) @removeItem() @data.mutex = @v(@data.mutex) @data.empty = @v(@data.empty) @consumeItem() procon = new ProConprocon.init();","tags":[{"name":"js","slug":"js","permalink":"http://yoursite.com/tags/js/"},{"name":"coffeescript","slug":"coffeescript","permalink":"http://yoursite.com/tags/coffeescript/"}]}]