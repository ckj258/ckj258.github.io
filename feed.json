{"title":"Dantel的博客","description":"趔趄上岸的青年。","language":null,"link":"http://yoursite.com","pubDate":"Thu, 03 Aug 2017 09:32:55 GMT","lastBuildDate":"Thu, 03 Aug 2017 09:43:16 GMT","generator":"hexo-generator-json-feed","webMaster":"Dantel Chen","items":[{"title":"麻将类胡牌算法","link":"http://yoursite.com/2017/08/03/mj_server_arithmetic/","description":"第一次做麻将服务端，记录下相关算法 ##胡牌算法 LayCards1234567891011/* *理牌*/ public static int[] LayCards(List&lt;Poker&gt; cardList) &#123; int nCardsLay[] = new int[MJ_LAYOUT_NUM]; for (Poker p : cardList) &#123; nCardsLay[p.getCode()]++; &#125; return nCardsLay; &#125; 12345678910111213141516171819202122232425262728293031323334/* *验证输入已经理好的牌型是否满足 3*N规则*/public static boolean fitThreePairsForLayCards(int laycards[]) &#123; int i = 0; for (;i &lt; MJ_LAYOUT_NUM; i++) &#123; if (laycards[i]&gt;0) &#123; break; &#125; &#125; if(i==MJ_LAYOUT_NUM) return true; for(i=0;i&lt;MJ_LAYOUT_NUM;i++) &#123; if (laycards[i]==0) continue; else if (laycards[i]==3) &#123; laycards[i] =0; return fitThreePairsForLayCards(laycards); &#125; else if (i&lt;28&amp;&amp;laycards[i]&gt;0&amp;&amp;laycards[i+1]&gt;0&amp;&amp;laycards[i+2]&gt;0) &#123; laycards[i]--; laycards[i+1]--; laycards[i+2]--; return fitThreePairsForLayCards(laycards); &#125; else &#123; return false; &#125; &#125; return true; &#125; 123456789101112131415161718192021222324252627/* *验证输入未理过的牌型是否满足 3*N规则(区分花色) */ public static boolean fitThreePairs(List&lt;Poker&gt; cardList) &#123; if (cardList.isEmpty()) &#123; return true; &#125; Map&lt;Suit,List&lt;Poker&gt;&gt; suit_pokers = new HashMap&lt;Suit, List&lt;Poker&gt;&gt;(); suit_pokers.put(Suit.TIAO, new ArrayList&lt;Poker&gt;()); suit_pokers.put(Suit.TONG, new ArrayList&lt;Poker&gt;()); suit_pokers.put(Suit.WAN, new ArrayList&lt;Poker&gt;()); suit_pokers.put(Suit.ZI, new ArrayList&lt;Poker&gt;()); for (Poker var:cardList) &#123; suit_pokers.get(var.getSuit()).add(var); &#125; for ( Suit suit:suit_pokers.keySet()) &#123; int[] laycards = LayCards(suit_pokers.get(suit)); if (!fitThreePairsForLayCards(laycards)) &#123; return false; &#125; &#125; return true; &#125; 123456789101112131415161718192021222324/* *胡牌算法入口函数 *1.找出牌型中所有两张以上的牌型并去除,作为将 *2.验证剩下牌型是否满足 3*N 规则*/ public static boolean analyzeNormalHu(List&lt;Poker&gt; cards) &#123; if (cards.size()%3!=2) &#123; return false; &#125; List&lt;Poker&gt; plist = new ArrayList&lt;Poker&gt;(); plist.addAll(cards); Collections.sort(plist, comparator); for (Poker p:plist) &#123; if (Collections.frequency(plist, p) &gt;= 2) &#123; List&lt;Poker&gt; wipe2jiangplist = new ArrayList&lt;Poker&gt;(plist); wipe2jiangplist.remove(p); wipe2jiangplist.remove(p); if (fitThreePairs(wipe2jiangplist)) &#123; return true; &#125; &#125; &#125; return false; &#125;","pubDate":"Thu, 03 Aug 2017 09:32:55 GMT","guid":"http://yoursite.com/2017/08/03/mj_server_arithmetic/","category":"mahjongsever"},{"title":"Sudoku Solver","link":"http://yoursite.com/2017/02/13/leetcode_2_SudokuSolver/","description":"DescriptionWrite a program to solve a Sudoku puzzle by filling the empty cells.Empty cells are indicated by the character ‘.’.You may assume that there will be only one unique solution.","pubDate":"Mon, 13 Feb 2017 02:21:51 GMT","guid":"http://yoursite.com/2017/02/13/leetcode_2_SudokuSolver/","category":"leetcode"},{"title":"Find All Duplicates in an Array","link":"http://yoursite.com/2017/02/10/leetcode_1_FindAllDuplicatesInAnArray/","description":"DescriptionGiven an array of integers, 1 ≤ a[i] ≤ n (n = size of array), some elements appear twice and others appear once.Find all the elements that appear twice in this array.Could you do it without extra space and in O(n) runtime?","pubDate":"Fri, 10 Feb 2017 05:28:00 GMT","guid":"http://yoursite.com/2017/02/10/leetcode_1_FindAllDuplicatesInAnArray/","category":"leetcode"},{"title":"位运算回顾","link":"http://yoursite.com/2017/02/08/bitoperation/","description":"”&amp;“ 按位与如果两个相应的二进制位都为１，则该位的结果值为1；否则为0","pubDate":"Wed, 08 Feb 2017 02:35:11 GMT","guid":"http://yoursite.com/2017/02/08/bitoperation/","category":"c++"},{"title":"redis实用之session管理","link":"http://yoursite.com/2017/01/24/node_redis_example_session/","description":"在游戏服务器里，登录服务器是必不可少的一块运用redis设置带时效的缓存，可以很好的解决session管理的问题。。","pubDate":"Tue, 24 Jan 2017 07:11:45 GMT","guid":"http://yoursite.com/2017/01/24/node_redis_example_session/","category":"node.js学习"},{"title":"二叉树的实现（c++）","link":"http://yoursite.com/2017/01/24/DataStructure_BinaryTree/","description":"github : https://github.com/ckj258/DataStructure/tree/master/%E4%BA%8C%E5%8F%89%E6%9F%A5%E6%89%BE%E6%A0%91","pubDate":"Tue, 24 Jan 2017 07:11:45 GMT","guid":"http://yoursite.com/2017/01/24/DataStructure_BinaryTree/","category":"数据结构"},{"title":"node调用mysql","link":"http://yoursite.com/2017/01/24/node_mysql/","description":"node.js与mysql交互。","pubDate":"Tue, 24 Jan 2017 07:11:45 GMT","guid":"http://yoursite.com/2017/01/24/node_mysql/","category":"node.js学习"},{"title":"redis配置参数说明","link":"http://yoursite.com/2017/01/17/redis_option/","description":"redis配置参数说明","pubDate":"Tue, 17 Jan 2017 02:32:49 GMT","guid":"http://yoursite.com/2017/01/17/redis_option/","category":"node.js学习"},{"title":"node调用redis","link":"http://yoursite.com/2017/01/17/node_redis/","description":"REmote DIctionary Server(Redis) 是一个由Salvatore Sanfilippo写的key-value存储系统。Redis是一个开源的使用ANSI C语言编写、遵守BSD协议、支持网络、可基于内存亦可持久化的日志型、Key-Value数据库，并提供多种语言的API。","pubDate":"Tue, 17 Jan 2017 01:55:52 GMT","guid":"http://yoursite.com/2017/01/17/node_redis/","category":"node.js学习"},{"title":"redis的安装与部署","link":"http://yoursite.com/2017/01/17/redis_generate/","description":"REmote DIctionary Server(Redis) 是一个由Salvatore Sanfilippo写的key-value存储系统。Redis是一个开源的使用ANSI C语言编写、遵守BSD协议、支持网络、可基于内存亦可持久化的日志型、Key-Value数据库，并提供多种语言的API。","pubDate":"Tue, 17 Jan 2017 01:55:52 GMT","guid":"http://yoursite.com/2017/01/17/redis_generate/","category":"node.js学习"},{"title":"pomelo学习入门笔记","link":"http://yoursite.com/2016/12/20/pomelo-chatserver/","description":"github : https://github.com/ckj258/PomeloClient/game-server 前言pomelo是一个游戏服务器框架，使用很简单。它包括基础开发框架和一系列相关工具和库，可以帮助开发者省去游戏开发中枯燥的重复劳动和底层逻辑工作，让开发者可以更多地去关注游戏的具体逻辑，大大提高开发效率。","pubDate":"Tue, 20 Dec 2016 08:55:19 GMT","guid":"http://yoursite.com/2016/12/20/pomelo-chatserver/","category":"pomelo"},{"title":"pomelo服务器与cocos2d交互","link":"http://yoursite.com/2016/12/13/pomelo-libpomelo/","description":"github : https://github.com/ckj258/PomeloClient/ Pomelo 是基于 Node.js 的高性能、分布式游戏服务器框架。非常适合用来开发轻量级手游。之前一直在用pomelo-cocos2dx架构，在此记录一下使用心得。","pubDate":"Tue, 13 Dec 2016 06:30:00 GMT","guid":"http://yoursite.com/2016/12/13/pomelo-libpomelo/","category":"pomelo"},{"title":"Hello World","link":"http://yoursite.com/2016/12/07/hello-world/","description":"前前后后折腾了一天，因为网速的关系，反反复复的安装，人生第一篇博客终于诞生。在此感谢 ”沸沸腾“ 提供的教程http://www.jianshu.com/p/863f3f2d1733以及 yilia作者“litten”提供的简约主题","pubDate":"Wed, 07 Dec 2016 03:54:00 GMT","guid":"http://yoursite.com/2016/12/07/hello-world/","category":"杂谈"}]}