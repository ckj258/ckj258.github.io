<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Dantel的博客</title>
  <subtitle>上不慕古，下不肖俗。为疏为懒，不敢为狂；为拙为愚，不敢为恶。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2016-12-20T09:44:42.185Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Dantel Chen</name>
    <email>122358085@qq.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>pomelo学习入门笔记</title>
    <link href="http://yoursite.com/2016/12/20/pomelo-chatserver/"/>
    <id>http://yoursite.com/2016/12/20/pomelo-chatserver/</id>
    <published>2016-12-20T08:55:19.000Z</published>
    <updated>2016-12-20T09:44:42.185Z</updated>
    
    <content type="html"><![CDATA[<p>github : <a href="https://github.com/ckj258/PomeloClient/game-server" target="_blank" rel="external">https://github.com/ckj258/PomeloClient/game-server</a></p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>pomelo是一个游戏服务器框架，使用很简单。<br>它包括基础开发框架和一系列相关工具和库，可以帮助开发者省去游戏开发中枯燥的重复劳动和底层逻辑工作，<br>让开发者可以更多地去关注游戏的具体逻辑，大大提高开发效率。    </p>
<a id="more"></a>
<h2 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h2><p><img src="/assets/image/pomelo_screenshot3.png" alt=""><br>../app/：         存放游戏逻辑脚本<br>../config/:       存放配置文件<br>../logs/:         存放历史日志<br>../node_modules/: 存放用到的npm包<br>../app.js：       pomelo入口<br>../package.json:  npm包配置文件</p>
<h2 id="运行架构"><a href="#运行架构" class="headerlink" title="运行架构"></a>运行架构</h2><p><img src="/assets/image/multi-chat.png" alt=""> </p>
<h2 id="代码架构"><a href="#代码架构" class="headerlink" title="代码架构"></a>代码架构</h2><p>app.js中声明了”connector”,”gate”,”chat”服务器<br>服务器配置信息在config目录下，servers.json配置具体的应用服务器信息。<br>在配置文件中，分为development和production两种环境，表示开发环境和产品环境<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">app.configure(&apos;production|development&apos;, &apos;connector&apos;, function()&#123;</div><div class="line">	app.set(&apos;connectorConfig&apos;,</div><div class="line">		&#123;</div><div class="line">			connector : pomelo.connectors.hybridconnector,</div><div class="line">			heartbeat : 3,</div><div class="line">			useDict : true,</div><div class="line">			useProtobuf : true</div><div class="line">		&#125;);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">app.configure(&apos;production|development&apos;, &apos;gate&apos;, function()&#123;</div><div class="line">	app.set(&apos;connectorConfig&apos;,</div><div class="line">		&#123;</div><div class="line">			connector : pomelo.connectors.hybridconnector,</div><div class="line">			useProtobuf : true</div><div class="line">		&#125;);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">// app configure</div><div class="line">app.configure(&apos;production|development&apos;, function() &#123;</div><div class="line">	// route configures</div><div class="line">	app.route(&apos;chat&apos;, routeUtil.chat);</div><div class="line"></div><div class="line">	// filter configures</div><div class="line">	app.filter(pomelo.timeout());</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<h3 id="“chat”服务器"><a href="#“chat”服务器" class="headerlink" title="“chat”服务器"></a>“chat”服务器</h3><p>../servers/chat目录下包含hander和remote两个文件夹，<br>其中hander下主要存放监听器，负责接收客户端发送请求做相应处理</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">handler.send = function(msg, session, next) &#123;</div><div class="line">	var rid = session.get(&apos;rid&apos;);</div><div class="line">	var username = session.uid.split(&apos;*&apos;)[0];</div><div class="line">	var channelService = this.app.get(&apos;channelService&apos;);</div><div class="line">	var param = &#123;</div><div class="line">		msg: msg.content,</div><div class="line">		from: username,</div><div class="line">		target: msg.target</div><div class="line">	&#125;;</div><div class="line">	channel = channelService.getChannel(rid, false);</div><div class="line"></div><div class="line">	//the target is all users</div><div class="line">	if(msg.target == &apos;*&apos;) &#123;</div><div class="line">		channel.pushMessage(&apos;onChat&apos;, param);</div><div class="line">	&#125;</div><div class="line">	//the target is specific user</div><div class="line">	else &#123;</div><div class="line">		var tuid = msg.target + &apos;*&apos; + rid;</div><div class="line">		var tsid = channel.getMember(tuid)[&apos;sid&apos;];</div><div class="line">		channelService.pushMessageByUids(&apos;onChat&apos;, param, [&#123;</div><div class="line">			uid: tuid,</div><div class="line">			sid: tsid</div><div class="line">		&#125;]);</div><div class="line">	&#125;</div><div class="line">	next(null, &#123;</div><div class="line">		route: msg.route</div><div class="line">	&#125;);</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>send方法主要功能是接收客户端发送的聊天信息，并广播给同channel下玩家，回调函数next()返回客户端错误码        </p>
<p>至于remote，当有客户端连接到connector上后，connector会向chat.remote发起远程过程调用，chat.remote会将登录的用户，加到对应的channel中        </p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;github : &lt;a href=&quot;https://github.com/ckj258/PomeloClient/game-server&quot;&gt;https://github.com/ckj258/PomeloClient/game-server&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;pomelo是一个游戏服务器框架，使用很简单。&lt;br&gt;它包括基础开发框架和一系列相关工具和库，可以帮助开发者省去游戏开发中枯燥的重复劳动和底层逻辑工作，&lt;br&gt;让开发者可以更多地去关注游戏的具体逻辑，大大提高开发效率。    &lt;/p&gt;
    
    </summary>
    
    
      <category term="pomelo" scheme="http://yoursite.com/tags/pomelo/"/>
    
  </entry>
  
  <entry>
    <title>pomelo服务器与cocos2d交互</title>
    <link href="http://yoursite.com/2016/12/13/pomelo-libpomelo/"/>
    <id>http://yoursite.com/2016/12/13/pomelo-libpomelo/</id>
    <published>2016-12-13T06:30:00.000Z</published>
    <updated>2016-12-20T08:56:03.401Z</updated>
    
    <content type="html"><![CDATA[<p>github : <a href="https://github.com/ckj258/PomeloClient/" target="_blank" rel="external">https://github.com/ckj258/PomeloClient/</a></p>
<p>Pomelo 是基于 Node.js 的高性能、分布式游戏服务器框架。<br>非常适合用来开发轻量级手游。<br>之前一直在用pomelo-cocos2dx架构，在此记录一下使用心得。  </p>
<a id="more"></a>
<h2 id="运行项目"><a href="#运行项目" class="headerlink" title="运行项目"></a>运行项目</h2><h3 id="Client"><a href="#Client" class="headerlink" title="Client"></a>Client</h3><p>coco2dx引擎版本3.10，拷贝引擎文件至根目录编译，运行  </p>
<h3 id="Server"><a href="#Server" class="headerlink" title="Server"></a>Server</h3><p>cd game-server<br><br>npm install<br><br>pomelo start<br></p>
<h2 id="类详解"><a href="#类详解" class="headerlink" title="类详解"></a>类详解</h2><h3 id="PomeloSocket"><a href="#PomeloSocket" class="headerlink" title="PomeloSocket"></a>PomeloSocket</h3><p>负责与server的交互<br>主要方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">	void conConnect(const char*ServerIP, int ServerPort	);//建立连接</div><div class="line">	void quit();										  //断开连接</div><div class="line"></div><div class="line">/* ==============================================================================</div><div class="line"> * 功能描述：发送事件,回调函数 typedef void (*pc_notify_cb_t)(const pc_notify_t* req, int rc);  rc表示错误码,无参数返回. 例用于上传游戏数据等等</div><div class="line"> * 创 建 者：ckj</div><div class="line"> * 创建日期：2016年12月13日17:30:49</div><div class="line"> * ==============================================================================*/</div><div class="line">	void sendEvents(const char* params, const char*remote, pc_notify_cb_t event_cb);</div><div class="line">/* ==============================================================================</div><div class="line"> * 功能描述：发送请求,回调函数 typedef void (*pc_request_cb_t)(const pc_request_t* req, int rc, const char* resp);  rc表示错误码,resp为服务器json结构. 例用于登录等需要返回结果的场景  </div><div class="line"> * 创 建 者：ckj</div><div class="line"> * 创建日期：2016年12月13日17:33:53</div><div class="line"> * ==============================================================================*/</div><div class="line">	void sendRequest(const char* params, const char*remote, pc_request_cb_t request_cb);</div></pre></td></tr></table></figure></p>
<h3 id="PomeloHandler"><a href="#PomeloHandler" class="headerlink" title="PomeloHandler"></a>PomeloHandler</h3><p>观察者模式中的观察者，负责向游戏中注册监听的对象发放广播<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">void addHandlerListen(PomeloListen* listen);//添加监听listen</div></pre></td></tr></table></figure></p>
<h3 id="PomeloListen"><a href="#PomeloListen" class="headerlink" title="PomeloListen"></a>PomeloListen</h3><p>观察者模式中的对象，一个纯虚类，负责接收消息<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">virtual void handle_event(const char* msgId, const char* msgBody)=0;  //msgId为服务器notify分发的remote</div></pre></td></tr></table></figure></p>
<h2 id="调用方法"><a href="#调用方法" class="headerlink" title="调用方法"></a>调用方法</h2><p>因为pomelo基于分布式游戏服务器框架，所以进入游戏时最好通过http请求获取TCP连接ip和port<br>然后调用onConnect建立连接</p>
<p>游戏中将需要注册监听的对象继承PomeloListen，重写handle_event()方法即可<br>具体示例见ChatDialog.hpp ChatDialog.cpp</p>
<h2 id="效果截图"><a href="#效果截图" class="headerlink" title="效果截图"></a>效果截图</h2><p><img src="/assets/image/pomelo_screenshot1.png" alt=""><br><img src="/assets/image/pomelo_screenshot2.png" alt="">  </p>
<p>界面粗糙，请勿见怪</p>
<h2 id="platform"><a href="#platform" class="headerlink" title="platform"></a>platform</h2><p>android和mac自行链接对应库文件</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;github : &lt;a href=&quot;https://github.com/ckj258/PomeloClient/&quot;&gt;https://github.com/ckj258/PomeloClient/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Pomelo 是基于 Node.js 的高性能、分布式游戏服务器框架。&lt;br&gt;非常适合用来开发轻量级手游。&lt;br&gt;之前一直在用pomelo-cocos2dx架构，在此记录一下使用心得。  &lt;/p&gt;
    
    </summary>
    
    
      <category term="pomelo" scheme="http://yoursite.com/tags/pomelo/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2016/12/07/hello-world/"/>
    <id>http://yoursite.com/2016/12/07/hello-world/</id>
    <published>2016-12-07T03:54:00.000Z</published>
    <updated>2016-12-08T08:57:42.279Z</updated>
    
    <content type="html"><![CDATA[<p>前前后后折腾了一天，因为网速的关系，反反复复的安装，人生第一篇博客终于诞生。<br>在此感谢 ”沸沸腾“ 提供的教程<a href="http://www.jianshu.com/p/863f3f2d1733" target="_blank" rel="external">http://www.jianshu.com/p/863f3f2d1733</a><br>以及 yilia作者“litten”提供的简约主题</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前前后后折腾了一天，因为网速的关系，反反复复的安装，人生第一篇博客终于诞生。&lt;br&gt;在此感谢 ”沸沸腾“ 提供的教程&lt;a href=&quot;http://www.jianshu.com/p/863f3f2d1733&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;
    
    </summary>
    
    
      <category term="杂谈" scheme="http://yoursite.com/tags/%E6%9D%82%E8%B0%88/"/>
    
  </entry>
  
</feed>
