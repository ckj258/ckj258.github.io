<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Dantel的博客</title>
  <subtitle>上不慕古，下不肖俗。为疏为懒，不敢为狂；为拙为愚，不敢为恶。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-01-17T03:06:07.363Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Dantel Chen</name>
    <email>122358085@qq.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>redis配置参数说明</title>
    <link href="http://yoursite.com/2017/01/17/redis_option/"/>
    <id>http://yoursite.com/2017/01/17/redis_option/</id>
    <published>2017-01-17T02:32:49.000Z</published>
    <updated>2017-01-17T03:06:07.363Z</updated>
    
    <content type="html"><![CDATA[<h2 id="redis配置参数说明"><a href="#redis配置参数说明" class="headerlink" title="redis配置参数说明"></a>redis配置参数说明</h2><a id="more"></a>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div><div class="line">275</div><div class="line">276</div><div class="line">277</div><div class="line">278</div><div class="line">279</div><div class="line">280</div><div class="line">281</div><div class="line">282</div><div class="line">283</div><div class="line">284</div><div class="line">285</div><div class="line">286</div><div class="line">287</div><div class="line">288</div><div class="line">289</div><div class="line">290</div><div class="line">291</div><div class="line">292</div><div class="line">293</div><div class="line">294</div><div class="line">295</div><div class="line">296</div><div class="line">297</div><div class="line">298</div><div class="line">299</div><div class="line">300</div><div class="line">301</div><div class="line">302</div><div class="line">303</div><div class="line">304</div><div class="line">305</div><div class="line">306</div><div class="line">307</div><div class="line">308</div><div class="line">309</div><div class="line">310</div><div class="line">311</div><div class="line">312</div><div class="line">313</div><div class="line">314</div><div class="line">315</div><div class="line">316</div><div class="line">317</div><div class="line">318</div><div class="line">319</div><div class="line">320</div><div class="line">321</div><div class="line">322</div><div class="line">323</div><div class="line">324</div><div class="line">325</div><div class="line">326</div><div class="line">327</div><div class="line">328</div><div class="line">329</div><div class="line">330</div><div class="line">331</div><div class="line">332</div><div class="line">333</div><div class="line">334</div><div class="line">335</div><div class="line">336</div><div class="line">337</div><div class="line">338</div><div class="line">339</div><div class="line">340</div><div class="line">341</div><div class="line">342</div><div class="line">343</div><div class="line">344</div><div class="line">345</div><div class="line">346</div><div class="line">347</div><div class="line">348</div><div class="line">349</div><div class="line">350</div><div class="line">351</div><div class="line">352</div><div class="line">353</div><div class="line">354</div><div class="line">355</div><div class="line">356</div><div class="line">357</div><div class="line">358</div><div class="line">359</div><div class="line">360</div><div class="line">361</div><div class="line">362</div><div class="line">363</div><div class="line">364</div><div class="line">365</div><div class="line">366</div><div class="line">367</div><div class="line">368</div><div class="line">369</div><div class="line">370</div><div class="line">371</div><div class="line">372</div><div class="line">373</div><div class="line">374</div><div class="line">375</div><div class="line">376</div><div class="line">377</div><div class="line">378</div><div class="line">379</div><div class="line">380</div><div class="line">381</div><div class="line">382</div><div class="line">383</div><div class="line">384</div><div class="line">385</div><div class="line">386</div><div class="line">387</div><div class="line">388</div><div class="line">389</div><div class="line">390</div><div class="line">391</div><div class="line">392</div><div class="line">393</div><div class="line">394</div><div class="line">395</div><div class="line">396</div><div class="line">397</div><div class="line">398</div><div class="line">399</div><div class="line">400</div><div class="line">401</div><div class="line">402</div><div class="line">403</div><div class="line">404</div><div class="line">405</div><div class="line">406</div><div class="line">407</div><div class="line">408</div><div class="line">409</div><div class="line">410</div><div class="line">411</div><div class="line">412</div><div class="line">413</div><div class="line">414</div><div class="line">415</div><div class="line">416</div><div class="line">417</div><div class="line">418</div><div class="line">419</div><div class="line">420</div><div class="line">421</div><div class="line">422</div><div class="line">423</div><div class="line">424</div><div class="line">425</div><div class="line">426</div><div class="line">427</div><div class="line">428</div><div class="line">429</div><div class="line">430</div><div class="line">431</div><div class="line">432</div><div class="line">433</div><div class="line">434</div><div class="line">435</div><div class="line">436</div><div class="line">437</div><div class="line">438</div><div class="line">439</div><div class="line">440</div><div class="line">441</div><div class="line">442</div><div class="line">443</div><div class="line">444</div><div class="line">445</div><div class="line">446</div><div class="line">447</div><div class="line">448</div><div class="line">449</div><div class="line">450</div><div class="line">451</div><div class="line">452</div><div class="line">453</div><div class="line">454</div><div class="line">455</div><div class="line">456</div><div class="line">457</div><div class="line">458</div><div class="line">459</div><div class="line">460</div><div class="line">461</div><div class="line">462</div><div class="line">463</div><div class="line">464</div><div class="line">465</div><div class="line">466</div><div class="line">467</div><div class="line">468</div><div class="line">469</div><div class="line">470</div><div class="line">471</div><div class="line">472</div><div class="line">473</div><div class="line">474</div><div class="line">475</div><div class="line">476</div><div class="line">477</div><div class="line">478</div><div class="line">479</div><div class="line">480</div><div class="line">481</div><div class="line">482</div><div class="line">483</div><div class="line">484</div><div class="line">485</div><div class="line">486</div><div class="line">487</div><div class="line">488</div><div class="line">489</div><div class="line">490</div><div class="line">491</div><div class="line">492</div><div class="line">493</div><div class="line">494</div><div class="line">495</div><div class="line">496</div><div class="line">497</div><div class="line">498</div><div class="line">499</div><div class="line">500</div><div class="line">501</div><div class="line">502</div><div class="line">503</div><div class="line">504</div><div class="line">505</div><div class="line">506</div><div class="line">507</div><div class="line">508</div><div class="line">509</div><div class="line">510</div><div class="line">511</div><div class="line">512</div><div class="line">513</div><div class="line">514</div><div class="line">515</div><div class="line">516</div><div class="line">517</div><div class="line">518</div><div class="line">519</div><div class="line">520</div><div class="line">521</div><div class="line">522</div><div class="line">523</div><div class="line">524</div><div class="line">525</div><div class="line">526</div><div class="line">527</div><div class="line">528</div><div class="line">529</div><div class="line">530</div><div class="line">531</div><div class="line">532</div><div class="line">533</div><div class="line">534</div><div class="line">535</div><div class="line">536</div><div class="line">537</div><div class="line">538</div><div class="line">539</div><div class="line">540</div><div class="line">541</div><div class="line">542</div><div class="line">543</div><div class="line">544</div><div class="line">545</div><div class="line">546</div><div class="line">547</div></pre></td><td class="code"><pre><div class="line">#</div><div class="line"># Redis configuration file example</div><div class="line"></div><div class="line"># Note on units: when memory size is needed, it is possible to specifiy</div><div class="line"># it in the usual form of 1k 5GB 4M and so forth:</div><div class="line">#</div><div class="line"># 1k =&gt; 1000 bytes</div><div class="line"># 1kb =&gt; 1024 bytes</div><div class="line"># 1m =&gt; 1000000 bytes</div><div class="line"># 1mb =&gt; 1024*1024 bytes</div><div class="line"># 1g =&gt; 1000000000 bytes</div><div class="line"># 1gb =&gt; 1024*1024*1024 bytes</div><div class="line">#</div><div class="line"># units are case insensitive so 1GB 1Gb 1gB are all the same.</div><div class="line"></div><div class="line"># By default Redis does not run as a daemon. Use &apos;yes&apos; if you need it.</div><div class="line"># Note that Redis will write a pid file in /var/run/redis.pid when daemonized.</div><div class="line"># Redis默认不是以守护进程的方式运行，可以通过该配置项修改，使用yes启用守护进程</div><div class="line">daemonize no</div><div class="line"></div><div class="line"># When running daemonized, Redis writes a pid file in /var/run/redis.pid by</div><div class="line"># default. You can specify a custom pid file location here.</div><div class="line"># 当Redis以守护进程方式运行时，Redis默认会把pid写入/var/run/redis.pid文件，可以通过pidfile指定</div><div class="line">pidfile /var/run/redis.pid</div><div class="line"></div><div class="line"># Accept connections on the specified port, default is 6379.</div><div class="line"># If port 0 is specified Redis will not listen on a TCP socket.</div><div class="line"># 指定Redis监听端口，默认端口为6379，作者在自己的一篇博文中解释了为什么选用6379作为默认端口，</div><div class="line"># 因为6379在手机按键上MERZ对应的号码，而MERZ取自意大利歌女Alessia Merz的名字</div><div class="line">port 6379</div><div class="line"></div><div class="line"># If you want you can bind a single interface, if the bind option is not</div><div class="line"># specified all the interfaces will listen for incoming connections.</div><div class="line"># 绑定的主机地址</div><div class="line">bind 127.0.0.1</div><div class="line"></div><div class="line"># Specify the path for the unix socket that will be used to listen for</div><div class="line"># incoming connections. There is no default, so Redis will not listen</div><div class="line"># on a unix socket when not specified.</div><div class="line">#</div><div class="line"># unixsocket /tmp/redis.sock</div><div class="line"># unixsocketperm 755</div><div class="line"></div><div class="line"># Close the connection after a client is idle for N seconds (0 to disable)</div><div class="line"># 当 客户端闲置多长时间后关闭连接，如果指定为0，表示关闭该功能</div><div class="line">timeout 0</div><div class="line"></div><div class="line"># Set server verbosity to &apos;debug&apos;</div><div class="line"># it can be one of:</div><div class="line"># debug (a lot of information, useful for development/testing)</div><div class="line"># verbose (many rarely useful info, but not a mess like the debug level)</div><div class="line"># notice (moderately verbose, what you want in production probably)</div><div class="line"># warning (only very important / critical messages are logged)</div><div class="line"># 指定日志记录级别，Redis总共支持四个级别：debug、verbose、notice、warning，默认为verbose</div><div class="line">loglevel verbose</div><div class="line"></div><div class="line"># Specify the log file name. Also &apos;stdout&apos; can be used to force</div><div class="line"># Redis to log on the standard output. Note that if you use standard</div><div class="line"># output for logging but daemonize, logs will be sent to /dev/null</div><div class="line"># 日志记录方式，默认为标准输出，如果配置Redis为守护进程方式运行，</div><div class="line"># 而这里又配置为日志记录方式为标准输出，则日志将会发送给/dev/null</div><div class="line">logfile stdout</div><div class="line"></div><div class="line"># To enable logging to the system logger, just set &apos;syslog-enabled&apos; to yes,</div><div class="line"># and optionally update the other syslog parameters to suit your needs.</div><div class="line"># syslog-enabled no</div><div class="line"></div><div class="line"># Specify the syslog identity.</div><div class="line"># syslog-ident redis</div><div class="line"></div><div class="line"># Specify the syslog facility.  Must be USER or between LOCAL0-LOCAL7.</div><div class="line"># syslog-facility local0</div><div class="line"></div><div class="line"># Set the number of databases. The default database is DB 0, you can select</div><div class="line"># a different one on a per-connection basis using SELECT &lt;dbid&gt; where</div><div class="line"># dbid is a number between 0 and &apos;databases&apos;-1</div><div class="line"># 设置数据库的数量，默认数据库为0，可以使用SELECT &lt;dbid&gt;命令在连接上指定数据库id</div><div class="line">databases 16</div><div class="line"></div><div class="line">################################ SNAPSHOTTING  #################################</div><div class="line">#</div><div class="line"># Save the DB on disk:</div><div class="line">#</div><div class="line">#   save &lt;seconds&gt; &lt;changes&gt;</div><div class="line">#</div><div class="line">#   Will save the DB if both the given number of seconds and the given</div><div class="line">#   number of write operations against the DB occurred.</div><div class="line">#</div><div class="line">#   In the example below the behaviour will be to save:</div><div class="line">#   after 900 sec (15 min) if at least 1 key changed</div><div class="line">#   after 300 sec (5 min) if at least 10 keys changed</div><div class="line">#   after 60 sec if at least 10000 keys changed</div><div class="line">#</div><div class="line">#   Note: you can disable saving at all commenting all the &quot;save&quot; lines.</div><div class="line">#   指定在多长时间内，有多少次更新操作，就将数据同步到数据文件，可以多个条件配合</div><div class="line">#   分别表示900秒（15分钟）内有1个更改，300秒（5分钟）内有10个更改以及60秒内有10000个更改</div><div class="line">save 900 1</div><div class="line">save 300 10</div><div class="line">save 60 10000</div><div class="line"></div><div class="line"># Compress string objects using LZF when dump .rdb databases?</div><div class="line"># For default that&apos;s set to &apos;yes&apos; as it&apos;s almost always a win.</div><div class="line"># If you want to save some CPU in the saving child set it to &apos;no&apos; but</div><div class="line"># the dataset will likely be bigger if you have compressible values or keys.</div><div class="line"># 指定存储至本地数据库时是否压缩数据，默认为yes，Redis采用LZF压缩，如果为了节省CPU时间，</div><div class="line"># 可以关闭该选项，但会导致数据库文件变的巨大</div><div class="line">rdbcompression yes</div><div class="line"></div><div class="line"># The filename where to dump the DB</div><div class="line"># 指定本地数据库文件名，默认值为dump.rdb</div><div class="line">dbfilename dump.rdb</div><div class="line"></div><div class="line"># The working directory.</div><div class="line">#</div><div class="line"># The DB will be written inside this directory, with the filename specified</div><div class="line"># above using the &apos;dbfilename&apos; configuration directive.</div><div class="line"># </div><div class="line"># Also the Append Only File will be created inside this directory.</div><div class="line"># </div><div class="line"># Note that you must specify a directory here, not a file name.</div><div class="line"># 指定本地数据库存放目录</div><div class="line">dir ./</div><div class="line"></div><div class="line">################################# REPLICATION #################################</div><div class="line"></div><div class="line"># Master-Slave replication. Use slaveof to make a Redis instance a copy of</div><div class="line"># another Redis server. Note that the configuration is local to the slave</div><div class="line"># so for example it is possible to configure the slave to save the DB with a</div><div class="line"># different interval, or to listen to another port, and so on.</div><div class="line"># 设置当本机为slav服务时，设置master服务的IP地址及端口，在Redis启动时，它会自动从master进行数据同步</div><div class="line"># slaveof &lt;masterip&gt; &lt;masterport&gt;</div><div class="line"></div><div class="line"># If the master is password protected (using the &quot;requirepass&quot; configuration</div><div class="line"># directive below) it is possible to tell the slave to authenticate before</div><div class="line"># starting the replication synchronization process, otherwise the master will</div><div class="line"># refuse the slave request.</div><div class="line"># 当master服务设置了密码保护时，slav服务连接master的密码</div><div class="line">#masterauth  &lt;master-password&gt;</div><div class="line"></div><div class="line"># When a slave lost the connection with the master, or when the replication</div><div class="line"># is still in progress, the slave can act in two different ways:</div><div class="line">#</div><div class="line"># 1) if slave-serve-stale-data is set to &apos;yes&apos; (the default) the slave will</div><div class="line">#    still reply to client requests, possibly with out of data data, or the</div><div class="line">#    data set may just be empty if this is the first synchronization.</div><div class="line">#</div><div class="line"># 2) if slave-serve-stale data is set to &apos;no&apos; the slave will reply with</div><div class="line">#    an error &quot;SYNC with master in progress&quot; to all the kind of commands</div><div class="line">#    but to INFO and SLAVEOF.</div><div class="line">#</div><div class="line">slave-serve-stale-data yes</div><div class="line"></div><div class="line"># Slaves send PINGs to server in a predefined interval. It&apos;s possible to change</div><div class="line"># this interval with the repl_ping_slave_period option. The default value is 10</div><div class="line"># seconds.</div><div class="line">#</div><div class="line"># repl-ping-slave-period 10</div><div class="line"></div><div class="line"># The following option sets a timeout for both Bulk transfer I/O timeout and</div><div class="line"># master data or ping response timeout. The default value is 60 seconds.</div><div class="line">#</div><div class="line"># It is important to make sure that this value is greater than the value</div><div class="line"># specified for repl-ping-slave-period otherwise a timeout will be detected</div><div class="line"># every time there is low traffic between the master and the slave.</div><div class="line">#</div><div class="line"># repl-timeout 60</div><div class="line"></div><div class="line">################################## SECURITY ###################################</div><div class="line"></div><div class="line"># Require clients to issue AUTH &lt;PASSWORD&gt; before processing any other</div><div class="line"># commands.  This might be useful in environments in which you do not trust</div><div class="line"># others with access to the host running redis-server.</div><div class="line">#</div><div class="line"># This should stay commented out for backward compatibility and because most</div><div class="line"># people do not need auth (e.g. they run their own servers).</div><div class="line"># </div><div class="line"># Warning: since Redis is pretty fast an outside user can try up to</div><div class="line"># 150k passwords per second against a good box. This means that you should</div><div class="line"># use a very strong password otherwise it will be very easy to break.</div><div class="line"># 设置Redis连接密码，如果配置了连接密码，客户端在连接Redis时需要通过AUTH &lt;password&gt;命令提供密码，默认关闭</div><div class="line">#requirepass foobared</div><div class="line"></div><div class="line"># Command renaming.</div><div class="line">#</div><div class="line"># It is possilbe to change the name of dangerous commands in a shared</div><div class="line"># environment. For instance the CONFIG command may be renamed into something</div><div class="line"># of hard to guess so that it will be still available for internal-use</div><div class="line"># tools but not available for general clients.</div><div class="line">#</div><div class="line"># Example:</div><div class="line">#</div><div class="line"># rename-command CONFIG b840fc02d524045429941cc15f59e41cb7be6c52</div><div class="line">#</div><div class="line"># It is also possilbe to completely kill a command renaming it into</div><div class="line"># an empty string:</div><div class="line">#</div><div class="line"># rename-command CONFIG &quot;&quot;</div><div class="line"></div><div class="line">################################### LIMITS ####################################</div><div class="line"></div><div class="line"># Set the max number of connected clients at the same time. By default there</div><div class="line"># is no limit, and it&apos;s up to the number of file descriptors the Redis process</div><div class="line"># is able to open. The special value &apos;0&apos; means no limits.</div><div class="line"># Once the limit is reached Redis will close all the new connections sending</div><div class="line"># an error &apos;max number of clients reached&apos;.</div><div class="line"># 设置同一时间最大客户端连接数，默认无限制，Redis可以同时打开的客户端连接数为Redis进程可以打开的最大文件描述符数，</div><div class="line"># 如果设置 maxclients 0，表示不作限制。</div><div class="line"># 当客户端连接数到达限制时，Redis会关闭新的连接并向客户端返回max number of clients reached错误信息</div><div class="line"># maxclients 128</div><div class="line"></div><div class="line"># Don&apos;t use more memory than the specified amount of bytes.</div><div class="line"># When the memory limit is reached Redis will try to remove keys with an</div><div class="line"># EXPIRE set. It will try to start freeing keys that are going to expire</div><div class="line"># in little time and preserve keys with a longer time to live.</div><div class="line"># Redis will also try to remove objects from free lists if possible.</div><div class="line">#</div><div class="line"># If all this fails, Redis will start to reply with errors to commands</div><div class="line"># that will use more memory, like SET, LPUSH, and so on, and will continue</div><div class="line"># to reply to most read-only commands like GET.</div><div class="line">#</div><div class="line"># WARNING: maxmemory can be a good idea mainly if you want to use Redis as a</div><div class="line"># &apos;state&apos; server or cache, not as a real DB. When Redis is used as a real</div><div class="line"># database the memory usage will grow over the weeks, it will be obvious if</div><div class="line"># it is going to use too much memory in the long run, and you&apos;ll have the time</div><div class="line"># to upgrade. With maxmemory after the limit is reached you&apos;ll start to get</div><div class="line"># errors for write operations, and this may even lead to DB inconsistency.</div><div class="line"># 指定Redis最大内存限制，Redis在启动时会把数据加载到内存中，达到最大内存后，</div><div class="line"># Redis会先尝试清除已到期或即将到期的Key，当此方法处理 后，仍然到达最大内存设置，</div><div class="line"># 将无法再进行写入操作，但仍然可以进行读取操作。</div><div class="line"># Redis新的vm机制，会把Key存放内存，Value会存放在swap区</div><div class="line"># maxmemory &lt;bytes&gt;</div><div class="line"></div><div class="line"># MAXMEMORY POLICY: how Redis will select what to remove when maxmemory</div><div class="line"># is reached? You can select among five behavior:</div><div class="line"># </div><div class="line"># volatile-lru -&gt; remove the key with an expire set using an LRU algorithm</div><div class="line"># allkeys-lru -&gt; remove any key accordingly to the LRU algorithm</div><div class="line"># volatile-random -&gt; remove a random key with an expire set</div><div class="line"># allkeys-&gt;random -&gt; remove a random key, any key</div><div class="line"># volatile-ttl -&gt; remove the key with the nearest expire time (minor TTL)</div><div class="line"># noeviction -&gt; don&apos;t expire at all, just return an error on write operations</div><div class="line"># </div><div class="line"># Note: with all the kind of policies, Redis will return an error on write</div><div class="line">#       operations, when there are not suitable keys for eviction.</div><div class="line">#</div><div class="line">#       At the date of writing this commands are: set setnx setex append</div><div class="line">#       incr decr rpush lpush rpushx lpushx linsert lset rpoplpush sadd</div><div class="line">#       sinter sinterstore sunion sunionstore sdiff sdiffstore zadd zincrby</div><div class="line">#       zunionstore zinterstore hset hsetnx hmset hincrby incrby decrby</div><div class="line">#       getset mset msetnx exec sort</div><div class="line">#</div><div class="line"># The default is:</div><div class="line">#</div><div class="line"># maxmemory-policy volatile-lru</div><div class="line"></div><div class="line"># LRU and minimal TTL algorithms are not precise algorithms but approximated</div><div class="line"># algorithms (in order to save memory), so you can select as well the sample</div><div class="line"># size to check. For instance for default Redis will check three keys and</div><div class="line"># pick the one that was used less recently, you can change the sample size</div><div class="line"># using the following configuration directive.</div><div class="line">#</div><div class="line"># maxmemory-samples 3</div><div class="line"></div><div class="line">############################## APPEND ONLY MODE ###############################</div><div class="line"></div><div class="line"># By default Redis asynchronously dumps the dataset on disk. If you can live</div><div class="line"># with the idea that the latest records will be lost if something like a crash</div><div class="line"># happens this is the preferred way to run Redis. If instead you care a lot</div><div class="line"># about your data and don&apos;t want to that a single record can get lost you should</div><div class="line"># enable the append only mode: when this mode is enabled Redis will append</div><div class="line"># every write operation received in the file appendonly.aof. This file will</div><div class="line"># be read on startup in order to rebuild the full dataset in memory.</div><div class="line">#</div><div class="line"># Note that you can have both the async dumps and the append only file if you</div><div class="line"># like (you have to comment the &quot;save&quot; statements above to disable the dumps).</div><div class="line"># Still if append only mode is enabled Redis will load the data from the</div><div class="line"># log file at startup ignoring the dump.rdb file.</div><div class="line">#</div><div class="line"># IMPORTANT: Check the BGREWRITEAOF to check how to rewrite the append</div><div class="line"># log file in background when it gets too big.</div><div class="line"># 指定是否在每次更新操作后进行日志记录，Redis在默认情况下是异步的把数据写入磁盘，</div><div class="line"># 如果不开启，可能会在断电时导致一段时间内的数据丢失。</div><div class="line"># 因为 redis本身同步数据文件是按上面save条件来同步的，所以有的数据会在一段时间内只存在于内存中。默认为no</div><div class="line">appendonly no</div><div class="line"></div><div class="line"># The name of the append only file (default: &quot;appendonly.aof&quot;)</div><div class="line"># 指定更新日志文件名，默认为appendonly.aof</div><div class="line"># appendfilename appendonly.aof</div><div class="line"></div><div class="line"># The fsync() call tells the Operating System to actually write data on disk</div><div class="line"># instead to wait for more data in the output buffer. Some OS will really flush </div><div class="line"># data on disk, some other OS will just try to do it ASAP.</div><div class="line">#</div><div class="line"># Redis supports three different modes:</div><div class="line">#</div><div class="line"># no: don&apos;t fsync, just let the OS flush the data when it wants. Faster.</div><div class="line"># always: fsync after every write to the append only log . Slow, Safest.</div><div class="line"># everysec: fsync only if one second passed since the last fsync. Compromise.</div><div class="line">#</div><div class="line"># 指定更新日志条件，共有3个可选值： </div><div class="line"># no：表示等操作系统进行数据缓存同步到磁盘（快） </div><div class="line"># always：表示每次更新操作后手动调用fsync()将数据写到磁盘（慢，安全） </div><div class="line"># everysec：表示每秒同步一次（折衷，默认值）</div><div class="line">#</div><div class="line"># The default is &quot;everysec&quot; that&apos;s usually the right compromise between</div><div class="line"># speed and data safety. It&apos;s up to you to understand if you can relax this to</div><div class="line"># &quot;no&quot; that will will let the operating system flush the output buffer when</div><div class="line"># it wants, for better performances (but if you can live with the idea of</div><div class="line"># some data loss consider the default persistence mode that&apos;s snapshotting),</div><div class="line"># or on the contrary, use &quot;always&quot; that&apos;s very slow but a bit safer than</div><div class="line"># everysec.</div><div class="line">#</div><div class="line"># If unsure, use &quot;everysec&quot;.</div><div class="line"></div><div class="line"># appendfsync always</div><div class="line">appendfsync everysec</div><div class="line"># appendfsync no</div><div class="line"></div><div class="line"># When the AOF fsync policy is set to always or everysec, and a background</div><div class="line"># saving process (a background save or AOF log background rewriting) is</div><div class="line"># performing a lot of I/O against the disk, in some Linux configurations</div><div class="line"># Redis may block too long on the fsync() call. Note that there is no fix for</div><div class="line"># this currently, as even performing fsync in a different thread will block</div><div class="line"># our synchronous write(2) call.</div><div class="line">#</div><div class="line"># In order to mitigate this problem it&apos;s possible to use the following option</div><div class="line"># that will prevent fsync() from being called in the main process while a</div><div class="line"># BGSAVE or BGREWRITEAOF is in progress.</div><div class="line">#</div><div class="line"># This means that while another child is saving the durability of Redis is</div><div class="line"># the same as &quot;appendfsync none&quot;, that in pratical terms means that it is</div><div class="line"># possible to lost up to 30 seconds of log in the worst scenario (with the</div><div class="line"># default Linux settings).</div><div class="line"># </div><div class="line"># If you have latency problems turn this to &quot;yes&quot;. Otherwise leave it as</div><div class="line"># &quot;no&quot; that is the safest pick from the point of view of durability.</div><div class="line">no-appendfsync-on-rewrite no</div><div class="line"></div><div class="line"># Automatic rewrite of the append only file.</div><div class="line"># Redis is able to automatically rewrite the log file implicitly calling</div><div class="line"># BGREWRITEAOF when the AOF log size will growth by the specified percentage.</div><div class="line"># </div><div class="line"># This is how it works: Redis remembers the size of the AOF file after the</div><div class="line"># latest rewrite (or if no rewrite happened since the restart, the size of</div><div class="line"># the AOF at startup is used).</div><div class="line">#</div><div class="line"># This base size is compared to the current size. If the current size is</div><div class="line"># bigger than the specified percentage, the rewrite is triggered. Also</div><div class="line"># you need to specify a minimal size for the AOF file to be rewritten, this</div><div class="line"># is useful to avoid rewriting the AOF file even if the percentage increase</div><div class="line"># is reached but it is still pretty small.</div><div class="line">#</div><div class="line"># Specify a precentage of zero in order to disable the automatic AOF</div><div class="line"># rewrite feature.</div><div class="line"></div><div class="line">auto-aof-rewrite-percentage 100</div><div class="line">auto-aof-rewrite-min-size 64mb</div><div class="line"></div><div class="line">################################## SLOW LOG ###################################</div><div class="line"></div><div class="line"># The Redis Slow Log is a system to log queries that exceeded a specified</div><div class="line"># execution time. The execution time does not include the I/O operations</div><div class="line"># like talking with the client, sending the reply and so forth,</div><div class="line"># but just the time needed to actually execute the command (this is the only</div><div class="line"># stage of command execution where the thread is blocked and can not serve</div><div class="line"># other requests in the meantime).</div><div class="line"># </div><div class="line"># You can configure the slow log with two parameters: one tells Redis</div><div class="line"># what is the execution time, in microseconds, to exceed in order for the</div><div class="line"># command to get logged, and the other parameter is the length of the</div><div class="line"># slow log. When a new command is logged the oldest one is removed from the</div><div class="line"># queue of logged commands.</div><div class="line"></div><div class="line"># The following time is expressed in microseconds, so 1000000 is equivalent</div><div class="line"># to one second. Note that a negative number disables the slow log, while</div><div class="line"># a value of zero forces the logging of every command.</div><div class="line">slowlog-log-slower-than 10000</div><div class="line"></div><div class="line"># There is no limit to this length. Just be aware that it will consume memory.</div><div class="line"># You can reclaim memory used by the slow log with SLOWLOG RESET.</div><div class="line">slowlog-max-len 1024</div><div class="line"></div><div class="line">################################ VIRTUAL MEMORY ###############################</div><div class="line"></div><div class="line">### WARNING! Virtual Memory is deprecated in Redis 2.4</div><div class="line">### The use of Virtual Memory is strongly discouraged.</div><div class="line"></div><div class="line">### WARNING! Virtual Memory is deprecated in Redis 2.4</div><div class="line">### The use of Virtual Memory is strongly discouraged.</div><div class="line"></div><div class="line"># Virtual Memory allows Redis to work with datasets bigger than the actual</div><div class="line"># amount of RAM needed to hold the whole dataset in memory.</div><div class="line"># In order to do so very used keys are taken in memory while the other keys</div><div class="line"># are swapped into a swap file, similarly to what operating systems do</div><div class="line"># with memory pages.</div><div class="line">#</div><div class="line"># To enable VM just set &apos;vm-enabled&apos; to yes, and set the following three</div><div class="line"># VM parameters accordingly to your needs.</div><div class="line">#</div><div class="line"># 指定是否启用虚拟内存机制，默认值为no，简单的介绍一下，</div><div class="line"># VM机制将数据分页存放，由Redis将访问量较少的页即冷数据swap到磁盘上，</div><div class="line"># 访问多的页面由磁盘自动换出到内存中（在后面的文章我会仔细分析Redis的VM机制）</div><div class="line">#</div><div class="line">vm-enabled no</div><div class="line"># vm-enabled yes</div><div class="line"></div><div class="line"># This is the path of the Redis swap file. As you can guess, swap files</div><div class="line"># can&apos;t be shared by different Redis instances, so make sure to use a swap</div><div class="line"># file for every redis process you are running. Redis will complain if the</div><div class="line"># swap file is already in use.</div><div class="line">#</div><div class="line"># The best kind of storage for the Redis swap file (that&apos;s accessed at random) </div><div class="line"># is a Solid State Disk (SSD).</div><div class="line">#</div><div class="line"># *** WARNING *** if you are using a shared hosting the default of putting</div><div class="line"># the swap file under /tmp is not secure. Create a dir with access granted</div><div class="line"># only to Redis user and configure Redis to create the swap file there.</div><div class="line"># 虚拟内存文件路径，默认值为/tmp/redis.swap，不可多个Redis实例共享</div><div class="line">vm-swap-file /tmp/redis.swap</div><div class="line"></div><div class="line"># vm-max-memory configures the VM to use at max the specified amount of</div><div class="line"># RAM. Everything that deos not fit will be swapped on disk *if* possible, that</div><div class="line"># is, if there is still enough contiguous space in the swap file.</div><div class="line">#</div><div class="line"># With vm-max-memory 0 the system will swap everything it can. Not a good</div><div class="line"># default, just specify the max amount of RAM you can in bytes, but it&apos;s</div><div class="line"># better to leave some margin. For instance specify an amount of RAM</div><div class="line"># that&apos;s more or less between 60 and 80% of your free RAM.</div><div class="line">#</div><div class="line"># 将所有大于vm-max-memory的数据存入虚拟内存,无论vm-max-memory设置多小,</div><div class="line"># 所有索引数据都是内存存储的(Redis的索引数据 就是keys),也就是说,</div><div class="line"># 当vm-max-memory设置为0的时候,其实是所有value都存在于磁盘。默认值为0</div><div class="line">#</div><div class="line">vm-max-memory 0</div><div class="line"></div><div class="line"># Redis swap files is split into pages. An object can be saved using multiple</div><div class="line"># contiguous pages, but pages can&apos;t be shared between different objects.</div><div class="line"># So if your page is too big, small objects swapped out on disk will waste</div><div class="line"># a lot of space. If you page is too small, there is less space in the swap</div><div class="line"># file (assuming you configured the same number of total swap file pages).</div><div class="line">#</div><div class="line"># If you use a lot of small objects, use a page size of 64 or 32 bytes.</div><div class="line"># If you use a lot of big objects, use a bigger page size.</div><div class="line"># If unsure, use the default :)</div><div class="line">#</div><div class="line"># Redis swap文件分成了很多的page，一个对象可以保存在多个page上面，</div><div class="line"># 但一个page上不能被多个对象共享，vm-page-size是要根据存储的 数据大小来设定的，</div><div class="line"># 作者建议如果存储很多小对象，page大小最好设置为32或者64bytes；</div><div class="line"># 如果存储很大大对象，则可以使用更大的page，如果不 确定，就使用默认值</div><div class="line">#</div><div class="line">vm-page-size 32</div><div class="line"></div><div class="line"># Number of total memory pages in the swap file.</div><div class="line"># Given that the page table (a bitmap of free/used pages) is taken in memory,</div><div class="line"># every 8 pages on disk will consume 1 byte of RAM.</div><div class="line">#</div><div class="line"># The total swap size is vm-page-size * vm-pages</div><div class="line">#</div><div class="line"># With the default of 32-bytes memory pages and 134217728 pages Redis will</div><div class="line"># use a 4 GB swap file, that will use 16 MB of RAM for the page table.</div><div class="line">#</div><div class="line"># It&apos;s better to use the smallest acceptable value for your application,</div><div class="line"># but the default is large in order to work in most conditions.</div><div class="line">#</div><div class="line"># 设置swap文件中的page数量，由于页表（一种表示页面空闲或使用的bitmap）是在放在内存中的，</div><div class="line"># 在磁盘上每8个pages将消耗1byte的内存。</div><div class="line">vm-pages 134217728</div><div class="line"></div><div class="line"># Max number of VM I/O threads running at the same time.</div><div class="line"># This threads are used to read/write data from/to swap file, since they</div><div class="line"># also encode and decode objects from disk to memory or the reverse, a bigger</div><div class="line"># number of threads can help with big objects even if they can&apos;t help with</div><div class="line"># I/O itself as the physical device may not be able to couple with many</div><div class="line"># reads/writes operations at the same time.</div><div class="line">#</div><div class="line"># The special value of 0 turn off threaded I/O and enables the blocking</div><div class="line"># Virtual Memory implementation.</div><div class="line">#</div><div class="line"># 设置访问swap文件的线程数,最好不要超过机器的核数,</div><div class="line"># 如果设置为0,那么所有对swap文件的操作都是串行的，可能会造成比较长时间的延迟。默认值为4</div><div class="line"># </div><div class="line">vm-max-threads 4</div><div class="line"></div><div class="line">############################### ADVANCED CONFIG ###############################</div><div class="line"></div><div class="line"># Hashes are encoded in a special way (much more memory efficient) when they</div><div class="line"># have at max a given numer of elements, and the biggest element does not</div><div class="line"># exceed a given threshold. You can configure this limits with the following</div><div class="line"># configuration directives.</div><div class="line">#</div><div class="line"># 指定在超过一定的数量或者最大的元素超过某一临界值时，采用一种特殊的哈希算法</div><div class="line"># </div><div class="line">hash-max-zipmap-entries 512</div><div class="line">hash-max-zipmap-value 64</div><div class="line"></div><div class="line"># Similarly to hashes, small lists are also encoded in a special way in order</div><div class="line"># to save a lot of space. The special representation is only used when</div><div class="line"># you are under the following limits:</div><div class="line">list-max-ziplist-entries 512</div><div class="line">list-max-ziplist-value 64</div><div class="line"></div><div class="line"># Sets have a special encoding in just one case: when a set is composed</div><div class="line"># of just strings that happens to be integers in radix 10 in the range</div><div class="line"># of 64 bit signed integers.</div><div class="line"># The following configuration setting sets the limit in the size of the</div><div class="line"># set in order to use this special memory saving encoding.</div><div class="line">set-max-intset-entries 512</div><div class="line"></div><div class="line"># Similarly to hashes and lists, sorted sets are also specially encoded in</div><div class="line"># order to save a lot of space. This encoding is only used when the length and</div><div class="line"># elements of a sorted set are below the following limits:</div><div class="line">zset-max-ziplist-entries 128</div><div class="line">zset-max-ziplist-value 64</div><div class="line"></div><div class="line"># Active rehashing uses 1 millisecond every 100 milliseconds of CPU time in</div><div class="line"># order to help rehashing the main Redis hash table (the one mapping top-level</div><div class="line"># keys to values). The hash table implementation redis uses (see dict.c)</div><div class="line"># performs a lazy rehashing: the more operation you run into an hash table</div><div class="line"># that is rhashing, the more rehashing &quot;steps&quot; are performed, so if the</div><div class="line"># server is idle the rehashing is never complete and some more memory is used</div><div class="line"># by the hash table.</div><div class="line"># </div><div class="line"># The default is to use this millisecond 10 times every second in order to</div><div class="line"># active rehashing the main dictionaries, freeing memory when possible.</div><div class="line">#</div><div class="line"># If unsure:</div><div class="line"># use &quot;activerehashing no&quot; if you have hard latency requirements and it is</div><div class="line"># not a good thing in your environment that Redis can reply form time to time</div><div class="line"># to queries with 2 milliseconds delay.</div><div class="line">#</div><div class="line"># use &quot;activerehashing yes&quot; if you don&apos;t have such hard requirements but</div><div class="line"># want to free memory asap when possible.</div><div class="line">#  指定是否激活重置哈希，默认为开启（）</div><div class="line">activerehashing yes</div><div class="line"></div><div class="line">################################## INCLUDES ###################################</div><div class="line"></div><div class="line"># Include one or more other config files here.  This is useful if you</div><div class="line"># have a standard template that goes to all redis server but also need</div><div class="line"># to customize a few per-server settings.  Include files can include</div><div class="line"># other files, so use this wisely.</div><div class="line">#</div><div class="line">#</div><div class="line"># 指定包含其它的配置文件，可以在同一主机上多个Redis实例之间使用同一份配置文件，而同时各个实例又拥有自己的特定配置文件</div><div class="line"># include /path/to/local.conf</div><div class="line"># include /path/to/other.conf</div><div class="line">#</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;redis配置参数说明&quot;&gt;&lt;a href=&quot;#redis配置参数说明&quot; class=&quot;headerlink&quot; title=&quot;redis配置参数说明&quot;&gt;&lt;/a&gt;redis配置参数说明&lt;/h2&gt;
    
    </summary>
    
    
      <category term="node.js学习" scheme="http://yoursite.com/tags/node-js%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>redis的安装与部署</title>
    <link href="http://yoursite.com/2017/01/17/node_redis/"/>
    <id>http://yoursite.com/2017/01/17/node_redis/</id>
    <published>2017-01-17T01:55:52.000Z</published>
    <updated>2017-01-17T03:09:55.976Z</updated>
    
    <content type="html"><![CDATA[<p>REmote DIctionary Server(Redis) 是一个由Salvatore Sanfilippo写的key-value存储系统。<br>Redis是一个开源的使用ANSI C语言编写、遵守BSD协议、支持网络、可基于内存亦可持久化的日志型、Key-Value数据库，并提供多种语言的API。   </p>
<a id="more"></a>
<h2 id="运行redis"><a href="#运行redis" class="headerlink" title="运行redis"></a>运行redis</h2><h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><p>下载地址 ：<a href="https://redis.io/" target="_blank" rel="external">https://redis.io/</a><br>Redis 支持 32 位和 64 位。<br>这个需要根据你系统平台的实际情况选择，这里我们下载 Redis-x64-xxx.zip,解压后，将文件夹重新命名为 redis。        </p>
<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>Redis 的配置文件位于 Redis 安装目录下，文件名为 redis.conf。<br>参数说明 : <a href="https://ckj258.github.io/2017/01/17/redis_option/" target="_blank" rel="external">https://ckj258.github.io/2017/01/17/redis_option/</a>    </p>
<h3 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h3><p>打开一个 cmd 窗口 使用cd命令切换目录/redis 运行 redis-server redis.conf。<br><img src="/assets/image/redis_running.png" alt="">   </p>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>这时候另启一个cmd窗口，原来的不要关闭，不然就无法访问服务端了。<br>切换到redis目录下运行  redis-cli -h host -p port -a password(redis-cli -h 127.0.0.1 -p 6379)。<br>设置键值对 set name Dantel<br>取出键值对 get name<br><img src="/assets/image/redis_running2.png" alt="">   </p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;REmote DIctionary Server(Redis) 是一个由Salvatore Sanfilippo写的key-value存储系统。&lt;br&gt;Redis是一个开源的使用ANSI C语言编写、遵守BSD协议、支持网络、可基于内存亦可持久化的日志型、Key-Value数据库，并提供多种语言的API。   &lt;/p&gt;
    
    </summary>
    
    
      <category term="node.js学习" scheme="http://yoursite.com/tags/node-js%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>pomelo学习入门笔记</title>
    <link href="http://yoursite.com/2016/12/20/pomelo-chatserver/"/>
    <id>http://yoursite.com/2016/12/20/pomelo-chatserver/</id>
    <published>2016-12-20T08:55:19.000Z</published>
    <updated>2016-12-20T09:44:42.185Z</updated>
    
    <content type="html"><![CDATA[<p>github : <a href="https://github.com/ckj258/PomeloClient/game-server" target="_blank" rel="external">https://github.com/ckj258/PomeloClient/game-server</a></p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>pomelo是一个游戏服务器框架，使用很简单。<br>它包括基础开发框架和一系列相关工具和库，可以帮助开发者省去游戏开发中枯燥的重复劳动和底层逻辑工作，<br>让开发者可以更多地去关注游戏的具体逻辑，大大提高开发效率。    </p>
<a id="more"></a>
<h2 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h2><p><img src="/assets/image/pomelo_screenshot3.png" alt=""><br>../app/：         存放游戏逻辑脚本<br>../config/:       存放配置文件<br>../logs/:         存放历史日志<br>../node_modules/: 存放用到的npm包<br>../app.js：       pomelo入口<br>../package.json:  npm包配置文件</p>
<h2 id="运行架构"><a href="#运行架构" class="headerlink" title="运行架构"></a>运行架构</h2><p><img src="/assets/image/multi-chat.png" alt=""> </p>
<h2 id="代码架构"><a href="#代码架构" class="headerlink" title="代码架构"></a>代码架构</h2><p>app.js中声明了”connector”,”gate”,”chat”服务器<br>服务器配置信息在config目录下，servers.json配置具体的应用服务器信息。<br>在配置文件中，分为development和production两种环境，表示开发环境和产品环境<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">app.configure(&apos;production|development&apos;, &apos;connector&apos;, function()&#123;</div><div class="line">	app.set(&apos;connectorConfig&apos;,</div><div class="line">		&#123;</div><div class="line">			connector : pomelo.connectors.hybridconnector,</div><div class="line">			heartbeat : 3,</div><div class="line">			useDict : true,</div><div class="line">			useProtobuf : true</div><div class="line">		&#125;);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">app.configure(&apos;production|development&apos;, &apos;gate&apos;, function()&#123;</div><div class="line">	app.set(&apos;connectorConfig&apos;,</div><div class="line">		&#123;</div><div class="line">			connector : pomelo.connectors.hybridconnector,</div><div class="line">			useProtobuf : true</div><div class="line">		&#125;);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">// app configure</div><div class="line">app.configure(&apos;production|development&apos;, function() &#123;</div><div class="line">	// route configures</div><div class="line">	app.route(&apos;chat&apos;, routeUtil.chat);</div><div class="line"></div><div class="line">	// filter configures</div><div class="line">	app.filter(pomelo.timeout());</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<h3 id="“chat”服务器"><a href="#“chat”服务器" class="headerlink" title="“chat”服务器"></a>“chat”服务器</h3><p>../servers/chat目录下包含hander和remote两个文件夹，<br>其中hander下主要存放监听器，负责接收客户端发送请求做相应处理</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">handler.send = function(msg, session, next) &#123;</div><div class="line">	var rid = session.get(&apos;rid&apos;);</div><div class="line">	var username = session.uid.split(&apos;*&apos;)[0];</div><div class="line">	var channelService = this.app.get(&apos;channelService&apos;);</div><div class="line">	var param = &#123;</div><div class="line">		msg: msg.content,</div><div class="line">		from: username,</div><div class="line">		target: msg.target</div><div class="line">	&#125;;</div><div class="line">	channel = channelService.getChannel(rid, false);</div><div class="line"></div><div class="line">	//the target is all users</div><div class="line">	if(msg.target == &apos;*&apos;) &#123;</div><div class="line">		channel.pushMessage(&apos;onChat&apos;, param);</div><div class="line">	&#125;</div><div class="line">	//the target is specific user</div><div class="line">	else &#123;</div><div class="line">		var tuid = msg.target + &apos;*&apos; + rid;</div><div class="line">		var tsid = channel.getMember(tuid)[&apos;sid&apos;];</div><div class="line">		channelService.pushMessageByUids(&apos;onChat&apos;, param, [&#123;</div><div class="line">			uid: tuid,</div><div class="line">			sid: tsid</div><div class="line">		&#125;]);</div><div class="line">	&#125;</div><div class="line">	next(null, &#123;</div><div class="line">		route: msg.route</div><div class="line">	&#125;);</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>send方法主要功能是接收客户端发送的聊天信息，并广播给同channel下玩家，回调函数next()返回客户端错误码        </p>
<p>至于remote，当有客户端连接到connector上后，connector会向chat.remote发起远程过程调用，chat.remote会将登录的用户，加到对应的channel中        </p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;github : &lt;a href=&quot;https://github.com/ckj258/PomeloClient/game-server&quot;&gt;https://github.com/ckj258/PomeloClient/game-server&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;pomelo是一个游戏服务器框架，使用很简单。&lt;br&gt;它包括基础开发框架和一系列相关工具和库，可以帮助开发者省去游戏开发中枯燥的重复劳动和底层逻辑工作，&lt;br&gt;让开发者可以更多地去关注游戏的具体逻辑，大大提高开发效率。    &lt;/p&gt;
    
    </summary>
    
    
      <category term="pomelo" scheme="http://yoursite.com/tags/pomelo/"/>
    
  </entry>
  
  <entry>
    <title>pomelo服务器与cocos2d交互</title>
    <link href="http://yoursite.com/2016/12/13/pomelo-libpomelo/"/>
    <id>http://yoursite.com/2016/12/13/pomelo-libpomelo/</id>
    <published>2016-12-13T06:30:00.000Z</published>
    <updated>2016-12-20T08:56:03.401Z</updated>
    
    <content type="html"><![CDATA[<p>github : <a href="https://github.com/ckj258/PomeloClient/" target="_blank" rel="external">https://github.com/ckj258/PomeloClient/</a></p>
<p>Pomelo 是基于 Node.js 的高性能、分布式游戏服务器框架。<br>非常适合用来开发轻量级手游。<br>之前一直在用pomelo-cocos2dx架构，在此记录一下使用心得。  </p>
<a id="more"></a>
<h2 id="运行项目"><a href="#运行项目" class="headerlink" title="运行项目"></a>运行项目</h2><h3 id="Client"><a href="#Client" class="headerlink" title="Client"></a>Client</h3><p>coco2dx引擎版本3.10，拷贝引擎文件至根目录编译，运行  </p>
<h3 id="Server"><a href="#Server" class="headerlink" title="Server"></a>Server</h3><p>cd game-server<br><br>npm install<br><br>pomelo start<br></p>
<h2 id="类详解"><a href="#类详解" class="headerlink" title="类详解"></a>类详解</h2><h3 id="PomeloSocket"><a href="#PomeloSocket" class="headerlink" title="PomeloSocket"></a>PomeloSocket</h3><p>负责与server的交互<br>主要方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">	void conConnect(const char*ServerIP, int ServerPort	);//建立连接</div><div class="line">	void quit();										  //断开连接</div><div class="line"></div><div class="line">/* ==============================================================================</div><div class="line"> * 功能描述：发送事件,回调函数 typedef void (*pc_notify_cb_t)(const pc_notify_t* req, int rc);  rc表示错误码,无参数返回. 例用于上传游戏数据等等</div><div class="line"> * 创 建 者：ckj</div><div class="line"> * 创建日期：2016年12月13日17:30:49</div><div class="line"> * ==============================================================================*/</div><div class="line">	void sendEvents(const char* params, const char*remote, pc_notify_cb_t event_cb);</div><div class="line">/* ==============================================================================</div><div class="line"> * 功能描述：发送请求,回调函数 typedef void (*pc_request_cb_t)(const pc_request_t* req, int rc, const char* resp);  rc表示错误码,resp为服务器json结构. 例用于登录等需要返回结果的场景  </div><div class="line"> * 创 建 者：ckj</div><div class="line"> * 创建日期：2016年12月13日17:33:53</div><div class="line"> * ==============================================================================*/</div><div class="line">	void sendRequest(const char* params, const char*remote, pc_request_cb_t request_cb);</div></pre></td></tr></table></figure></p>
<h3 id="PomeloHandler"><a href="#PomeloHandler" class="headerlink" title="PomeloHandler"></a>PomeloHandler</h3><p>观察者模式中的观察者，负责向游戏中注册监听的对象发放广播<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">void addHandlerListen(PomeloListen* listen);//添加监听listen</div></pre></td></tr></table></figure></p>
<h3 id="PomeloListen"><a href="#PomeloListen" class="headerlink" title="PomeloListen"></a>PomeloListen</h3><p>观察者模式中的对象，一个纯虚类，负责接收消息<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">virtual void handle_event(const char* msgId, const char* msgBody)=0;  //msgId为服务器notify分发的remote</div></pre></td></tr></table></figure></p>
<h2 id="调用方法"><a href="#调用方法" class="headerlink" title="调用方法"></a>调用方法</h2><p>因为pomelo基于分布式游戏服务器框架，所以进入游戏时最好通过http请求获取TCP连接ip和port<br>然后调用onConnect建立连接</p>
<p>游戏中将需要注册监听的对象继承PomeloListen，重写handle_event()方法即可<br>具体示例见ChatDialog.hpp ChatDialog.cpp</p>
<h2 id="效果截图"><a href="#效果截图" class="headerlink" title="效果截图"></a>效果截图</h2><p><img src="/assets/image/pomelo_screenshot1.png" alt=""><br><img src="/assets/image/pomelo_screenshot2.png" alt="">  </p>
<p>界面粗糙，请勿见怪</p>
<h2 id="platform"><a href="#platform" class="headerlink" title="platform"></a>platform</h2><p>android和mac自行链接对应库文件</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;github : &lt;a href=&quot;https://github.com/ckj258/PomeloClient/&quot;&gt;https://github.com/ckj258/PomeloClient/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Pomelo 是基于 Node.js 的高性能、分布式游戏服务器框架。&lt;br&gt;非常适合用来开发轻量级手游。&lt;br&gt;之前一直在用pomelo-cocos2dx架构，在此记录一下使用心得。  &lt;/p&gt;
    
    </summary>
    
    
      <category term="pomelo" scheme="http://yoursite.com/tags/pomelo/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2016/12/07/hello-world/"/>
    <id>http://yoursite.com/2016/12/07/hello-world/</id>
    <published>2016-12-07T03:54:00.000Z</published>
    <updated>2016-12-08T08:57:42.279Z</updated>
    
    <content type="html"><![CDATA[<p>前前后后折腾了一天，因为网速的关系，反反复复的安装，人生第一篇博客终于诞生。<br>在此感谢 ”沸沸腾“ 提供的教程<a href="http://www.jianshu.com/p/863f3f2d1733" target="_blank" rel="external">http://www.jianshu.com/p/863f3f2d1733</a><br>以及 yilia作者“litten”提供的简约主题</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前前后后折腾了一天，因为网速的关系，反反复复的安装，人生第一篇博客终于诞生。&lt;br&gt;在此感谢 ”沸沸腾“ 提供的教程&lt;a href=&quot;http://www.jianshu.com/p/863f3f2d1733&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;
    
    </summary>
    
    
      <category term="杂谈" scheme="http://yoursite.com/tags/%E6%9D%82%E8%B0%88/"/>
    
  </entry>
  
</feed>
